// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package awsentity

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/adapter"
)

func newResourceModel() adapter.Model[tfModel] {
	return new(resourceModel)
}

// resourceModel with specific resource timeouts
type resourceModel struct {
	tfModel
	Timeouts timeouts.Value `tfsdk:"timeouts"`
}

func (tf *resourceModel) SharedModel() *tfModel {
	return &tf.tfModel
}

/*
newResourceSchema:

	resource "aiven_byoc_aws_entity" "example" {
	  organization_id  = "org1a23f456789" // Force new
	  display_name     = "test"
	  aws_iam_role_arn = "admin"
	  cloud_provider   = "aws"
	  cloud_region     = "foo"
	  contact_emails {
	    email     = "test@example.com"
	    real_name = "test"
	    role      = "admin"
	  }
	  deployment_model = "direct_ipsec_ingress"
	  reserved_cidr    = "10.0.0.0/24"

	  // COMPUTED FIELDS
	  aiven_assume_role_external_id = "admin"
	  aiven_aws_account_principal   = "foo"
	  aiven_management_cidr_blocks  = ["10.0.0.0/24"]
	  aiven_object_storage_user_arn = "foo"
	  bucket_names {
	    backup = "foo"
	    tiered = "foo"
	  }
	  byoc_name                   = "test"
	  custom_cloud_environment_id = "foo"
	  custom_cloud_names          = ["test"]
	  custom_tags = {
	    foo = "foo"
	  }
	  errors {
	    category = "general_error"
	    message  = "foo"
	  }
	  state = "active"
	  subnets_bastion = {
	    foo = {
	      availability_zone = "foo"
	      cidr              = "10.0.0.0/24"
	    }
	  }
	  subnets_workload = {
	    foo = {
	      availability_zone = "foo"
	      cidr              = "10.0.0.0/24"
	    }
	  }
	  update_time                = "foo"
	  use_customer_owned_storage = true
	}
*/
func newResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"aiven_assume_role_external_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "External ID for assuming the IAM role for controlling the BYOC account.",
			},
			"aiven_aws_account_principal": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Entity that assumes the IAM role for controlling the BYOC account.",
			},
			"aiven_management_cidr_blocks": schema.SetAttribute{
				Computed:            true,
				ElementType:         types.StringType,
				MarkdownDescription: "IP address ranges for incoming connections to the bastion host from the Aiven management plane.",
			},
			"aiven_object_storage_user_arn": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Amazon Resource Name.",
			},
			"aws_iam_role_arn": schema.StringAttribute{
				MarkdownDescription: "Amazon Resource Name. Maximum length: `2048`.",
				Optional:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(2048)},
			},
			"byoc_name": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Name for all the resources created for the custom cloud environment.",
			},
			"cloud_provider": schema.StringAttribute{
				MarkdownDescription: "Cloud provider for the BYOC cloud. The possible values are `aws`, `azure`, `google` and `oracle`.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.OneOf("aws", "azure", "google", "oracle")},
			},
			"cloud_region": schema.StringAttribute{
				MarkdownDescription: "Cloud region for the BYOC cloud. Maximum length: `32`.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(32)},
			},
			"custom_cloud_environment_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "ID of a custom cloud environment.",
			},
			"custom_cloud_names": schema.SetAttribute{
				Computed:            true,
				ElementType:         types.StringType,
				MarkdownDescription: "Cloud names that can be used to provision a service on this BYOC.",
			},
			"custom_tags": schema.MapAttribute{
				Computed:            true,
				ElementType:         types.StringType,
				MarkdownDescription: "Set of tags for the resources provisioned on the BYOC account.",
			},
			"deployment_model": schema.StringAttribute{
				MarkdownDescription: "Deployment model for the BYOC cloud. The possible values are `direct_ipsec_ingress`, `ipsec_ingress`, `standard` and `standard_public`.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.OneOf("direct_ipsec_ingress", "ipsec_ingress", "standard", "standard_public")},
			},
			"display_name": schema.StringAttribute{
				MarkdownDescription: "Short name for this BYOC cloud. Maximum length: `64`.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(64)},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Resource ID, a composite of `organization_id` and `display_name` IDs.",
			},
			"organization_id": schema.StringAttribute{
				MarkdownDescription: "ID of an organization. Changing this property forces recreation of the resource.",
				PlanModifiers:       []planmodifier.String{stringplanmodifier.RequiresReplace()},
				Required:            true,
			},
			"reserved_cidr": schema.StringAttribute{
				MarkdownDescription: "CIDR range reserved for Aiven provisioned networks in the BYOC cloud. Maximum length: `18`.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(18)},
			},
			"state": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "State of this BYOC cloud. The possible values are `active`, `creating`, `creation_failed`, `deleted`, `deleting`, `deletion_failed`, `disconnected`, `draft`, `reconnecting` and `validating`.",
			},
			"subnets_bastion": schema.MapNestedAttribute{
				Computed:            true,
				MarkdownDescription: "Subnets to build in the bastion VPC.",
				NestedObject: schema.NestedAttributeObject{Attributes: map[string]schema.Attribute{
					"availability_zone": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "AZ code.",
					},
					"cidr": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "CIDR of the subnet in this AZ.",
					},
				}},
			},
			"subnets_workload": schema.MapNestedAttribute{
				Computed:            true,
				MarkdownDescription: "Subnets to build in the workload VPC.",
				NestedObject: schema.NestedAttributeObject{Attributes: map[string]schema.Attribute{
					"availability_zone": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "AZ code.",
					},
					"cidr": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "CIDR of the subnet in this AZ.",
					},
				}},
			},
			"update_time": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Custom cloud environment last update timestamp (ISO 8601).",
			},
			"use_customer_owned_storage": schema.BoolAttribute{
				Computed:            true,
				MarkdownDescription: "True if this BYOC cloud is using customer owned storage.",
			},
		},
		Blocks: map[string]schema.Block{
			"bucket_names": schema.ListNestedBlock{
				MarkdownDescription: "Names and usages of buckets required for workloads.",
				NestedObject: schema.NestedBlockObject{Attributes: map[string]schema.Attribute{
					"backup": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Bucket name.",
					},
					"tiered": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Bucket name.",
					},
				}},
			},
			"contact_emails": schema.SetNestedBlock{
				MarkdownDescription: "Email addresses for notifications and alerts for this BYOC cloud.",
				NestedObject: schema.NestedBlockObject{Attributes: map[string]schema.Attribute{
					"email": schema.StringAttribute{
						MarkdownDescription: "User email address. Maximum length: `319`.",
						Required:            true,
						Validators:          []validator.String{stringvalidator.LengthAtMost(319)},
					},
					"real_name": schema.StringAttribute{
						MarkdownDescription: "User real name. Maximum length: `256`.",
						Optional:            true,
						Validators:          []validator.String{stringvalidator.LengthAtMost(256)},
					},
					"role": schema.StringAttribute{
						MarkdownDescription: "Role of this user. Maximum length: `256`.",
						Optional:            true,
						Validators:          []validator.String{stringvalidator.LengthAtMost(256)},
					},
				}},
				Validators: []validator.Set{setvalidator.SizeBetween(1, 10)},
			},
			"errors": schema.SetNestedBlock{
				MarkdownDescription: "List of errors for this custom cloud environment.",
				NestedObject: schema.NestedBlockObject{Attributes: map[string]schema.Attribute{
					"category": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Category of this error. The possible value is `general_error`.",
					},
					"message": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Description of this error.",
					},
				}},
			},
			"timeouts": timeouts.BlockAll(ctx),
		},
		MarkdownDescription: "byoc. \n\n**This resource is in the beta stage and may change without notice.** Set\nthe `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.",
	}
}
