// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package awsentity

import (
	"context"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

const aivenName = "aiven_byoc_aws_entity"

type tfModel struct {
	ID                        types.String `tfsdk:"id"`
	AivenAssumeRoleExternalID types.String `tfsdk:"aiven_assume_role_external_id"`
	AivenAwsAccountPrincipal  types.String `tfsdk:"aiven_aws_account_principal"`
	AivenManagementCidrBlocks types.Set    `tfsdk:"aiven_management_cidr_blocks"`
	AivenObjectStorageUserArn types.String `tfsdk:"aiven_object_storage_user_arn"`
	AwsIamRoleArn             types.String `tfsdk:"aws_iam_role_arn"`
	BucketNames               types.List   `tfsdk:"bucket_names"`
	ByocName                  types.String `tfsdk:"byoc_name"`
	CloudProvider             types.String `tfsdk:"cloud_provider"`
	CloudRegion               types.String `tfsdk:"cloud_region"`
	ContactEmails             types.Set    `tfsdk:"contact_emails"`
	CustomCloudEnvironmentID  types.String `tfsdk:"custom_cloud_environment_id"`
	CustomCloudNames          types.Set    `tfsdk:"custom_cloud_names"`
	CustomTags                types.Map    `tfsdk:"custom_tags"`
	DeploymentModel           types.String `tfsdk:"deployment_model"`
	DisplayName               types.String `tfsdk:"display_name"`
	Errors                    types.Set    `tfsdk:"errors"`
	OrganizationID            types.String `tfsdk:"organization_id"`
	ReservedCidr              types.String `tfsdk:"reserved_cidr"`
	State                     types.String `tfsdk:"state"`
	SubnetsBastion            types.Map    `tfsdk:"subnets_bastion"`
	SubnetsWorkload           types.Map    `tfsdk:"subnets_workload"`
	UpdateTime                types.String `tfsdk:"update_time"`
	UseCustomerOwnedStorage   types.Bool   `tfsdk:"use_customer_owned_storage"`
}

func (tf *tfModel) SetID(vOrganizationID string, vDisplayName string) {
	tf.OrganizationID = types.StringValue(vOrganizationID)
	tf.DisplayName = types.StringValue(vDisplayName)
	tf.ID = types.StringValue(filepath.Join(vOrganizationID, vDisplayName))
}

type tfModelBucketNames struct {
	Backup types.String `tfsdk:"backup"`
	Tiered types.String `tfsdk:"tiered"`
}

type tfModelContactEmails struct {
	Email    types.String `tfsdk:"email"`
	RealName types.String `tfsdk:"real_name"`
	Role     types.String `tfsdk:"role"`
}

type tfModelErrors struct {
	Category types.String `tfsdk:"category"`
	Message  types.String `tfsdk:"message"`
}

type tfModelSubnetsBastion struct {
	AvailabilityZone types.String `tfsdk:"availability_zone"`
	Cidr             types.String `tfsdk:"cidr"`
}

type tfModelSubnetsWorkload struct {
	AvailabilityZone types.String `tfsdk:"availability_zone"`
	Cidr             types.String `tfsdk:"cidr"`
}

type apiModel struct {
	AivenAssumeRoleExternalID *string                              `json:"aiven_aws_assume_role_external_id,omitempty"`
	AivenAwsAccountPrincipal  *string                              `json:"aiven_aws_account_principal,omitempty"`
	AivenManagementCidrBlocks *[]string                            `json:"aiven_management_cidr_blocks,omitempty"`
	AivenObjectStorageUserArn *string                              `json:"aiven_aws_object_storage_user_arn,omitempty"`
	AwsIamRoleArn             *string                              `json:"aws_iam_role_arn,omitempty"`
	BucketNames               *apiModelBucketNames                 `json:"bucket_names,omitempty"`
	ByocName                  *string                              `json:"byoc_unique_name,omitempty"`
	CloudProvider             *string                              `json:"cloud_provider,omitempty"`
	CloudRegion               *string                              `json:"cloud_region,omitempty"`
	ContactEmails             *[]*apiModelContactEmails            `json:"contact_emails,omitempty"`
	CustomCloudEnvironmentID  *string                              `json:"custom_cloud_environment_id,omitempty"`
	CustomCloudNames          *[]string                            `json:"custom_cloud_names,omitempty"`
	CustomTags                *map[string]*string                  `json:"byoc_resource_tags,omitempty"`
	DeploymentModel           *string                              `json:"deployment_model,omitempty"`
	DisplayName               *string                              `json:"display_name,omitempty"`
	Errors                    *[]*apiModelErrors                   `json:"errors,omitempty"`
	OrganizationID            *string                              `json:"organization_id,omitempty"`
	ReservedCidr              *string                              `json:"reserved_cidr,omitempty"`
	State                     *string                              `json:"state,omitempty"`
	SubnetsBastion            *map[string]*apiModelSubnetsBastion  `json:"aws_subnets_bastion,omitempty"`
	SubnetsWorkload           *map[string]*apiModelSubnetsWorkload `json:"aws_subnets_workload,omitempty"`
	UpdateTime                *string                              `json:"update_time,omitempty"`
	UseCustomerOwnedStorage   *bool                                `json:"use_customer_owned_storage,omitempty"`
}

type apiModelBucketNames struct {
	Backup *string `json:"backup,omitempty"`
	Tiered *string `json:"tiered,omitempty"`
}

type apiModelContactEmails struct {
	Email    *string `json:"email,omitempty"`
	RealName *string `json:"real_name,omitempty"`
	Role     *string `json:"role,omitempty"`
}

type apiModelErrors struct {
	Category *string `json:"category,omitempty"`
	Message  *string `json:"message,omitempty"`
}

type apiModelSubnetsBastion struct {
	AvailabilityZone *string `json:"availability_zone,omitempty"`
	Cidr             *string `json:"cidr,omitempty"`
}

type apiModelSubnetsWorkload struct {
	AvailabilityZone *string `json:"availability_zone,omitempty"`
	Cidr             *string `json:"cidr,omitempty"`
}

// composeID the ID attribute fields, i.e.:
// terraform import aiven_byoc_aws_entity.foo ORGANIZATION_ID/DISPLAY_NAME
func composeID() []string {
	return []string{"organization_id", "display_name"}
}

// expandData turns TF object into Request
func expandData[R any](ctx context.Context, plan, state *tfModel, req *R, modifiers ...util.MapModifier[apiModel]) diag.Diagnostics {
	api := new(apiModel)
	if !plan.ContactEmails.IsNull() || state != nil && !state.ContactEmails.IsNull() {
		vContactEmails, diags := util.ExpandSetNested(ctx, expandContactEmails, plan.ContactEmails)
		if diags.HasError() {
			return diags
		}
		api.ContactEmails = &vContactEmails
	}
	if !plan.AwsIamRoleArn.IsNull() || state != nil && !state.AwsIamRoleArn.IsNull() {
		vAwsIamRoleArn := plan.AwsIamRoleArn.ValueString()
		api.AwsIamRoleArn = &vAwsIamRoleArn
	}
	if !plan.CloudProvider.IsNull() || state != nil && !state.CloudProvider.IsNull() {
		vCloudProvider := plan.CloudProvider.ValueString()
		api.CloudProvider = &vCloudProvider
	}
	if !plan.CloudRegion.IsNull() || state != nil && !state.CloudRegion.IsNull() {
		vCloudRegion := plan.CloudRegion.ValueString()
		api.CloudRegion = &vCloudRegion
	}
	if !plan.DeploymentModel.IsNull() || state != nil && !state.DeploymentModel.IsNull() {
		vDeploymentModel := plan.DeploymentModel.ValueString()
		api.DeploymentModel = &vDeploymentModel
	}
	if !plan.DisplayName.IsNull() || state != nil && !state.DisplayName.IsNull() {
		vDisplayName := plan.DisplayName.ValueString()
		api.DisplayName = &vDisplayName
	}
	if !plan.OrganizationID.IsNull() || state != nil && !state.OrganizationID.IsNull() {
		vOrganizationID := plan.OrganizationID.ValueString()
		api.OrganizationID = &vOrganizationID
	}
	if !plan.ReservedCidr.IsNull() || state != nil && !state.ReservedCidr.IsNull() {
		vReservedCidr := plan.ReservedCidr.ValueString()
		api.ReservedCidr = &vReservedCidr
	}
	err := util.Unmarshal(api, req, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal dtoModel to Request: %s", err.Error()))
		return diags
	}
	return nil
}

func expandBucketNames(ctx context.Context, plan *tfModelBucketNames) (*apiModelBucketNames, diag.Diagnostics) {
	api := new(apiModelBucketNames)
	return api, nil
}

func expandContactEmails(ctx context.Context, plan *tfModelContactEmails) (*apiModelContactEmails, diag.Diagnostics) {
	api := new(apiModelContactEmails)
	if !plan.Email.IsNull() {
		vEmail := plan.Email.ValueString()
		api.Email = &vEmail
	}
	if !plan.RealName.IsNull() {
		vRealName := plan.RealName.ValueString()
		api.RealName = &vRealName
	}
	if !plan.Role.IsNull() {
		vRole := plan.Role.ValueString()
		api.Role = &vRole
	}
	return api, nil
}

func expandErrors(ctx context.Context, plan *tfModelErrors) (*apiModelErrors, diag.Diagnostics) {
	api := new(apiModelErrors)
	return api, nil
}

func expandSubnetsBastion(ctx context.Context, plan *tfModelSubnetsBastion) (*apiModelSubnetsBastion, diag.Diagnostics) {
	api := new(apiModelSubnetsBastion)
	return api, nil
}

func expandSubnetsWorkload(ctx context.Context, plan *tfModelSubnetsWorkload) (*apiModelSubnetsWorkload, diag.Diagnostics) {
	api := new(apiModelSubnetsWorkload)
	return api, nil
}

// flattenData turns Response into TF object
func flattenData[R any](ctx context.Context, state *tfModel, rsp *R, modifiers ...util.MapModifier[R]) diag.Diagnostics {
	api := new(apiModel)
	err := util.Unmarshal(rsp, api, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal Response to dtoModel: %s", err.Error()))
		return diags
	}
	if api.AivenManagementCidrBlocks != nil && (len(*api.AivenManagementCidrBlocks) > 0 || !state.AivenManagementCidrBlocks.IsNull()) {
		vAivenManagementCidrBlocks, diags := types.SetValueFrom(ctx, types.StringType, api.AivenManagementCidrBlocks)
		if diags.HasError() {
			return diags
		}
		state.AivenManagementCidrBlocks = vAivenManagementCidrBlocks
	}
	if api.BucketNames != nil {
		vBucketNames, diags := util.FlattenSingleNested(ctx, flattenBucketNames, api.BucketNames, attrsBucketNames())
		if diags.HasError() {
			return diags
		}
		state.BucketNames = vBucketNames
	}
	if api.ContactEmails != nil {
		vContactEmails, diags := util.FlattenSetNested(ctx, flattenContactEmails, *api.ContactEmails, attrsContactEmails())
		if diags.HasError() {
			return diags
		}
		state.ContactEmails = vContactEmails
	}
	if api.CustomCloudNames != nil && (len(*api.CustomCloudNames) > 0 || !state.CustomCloudNames.IsNull()) {
		vCustomCloudNames, diags := types.SetValueFrom(ctx, types.StringType, api.CustomCloudNames)
		if diags.HasError() {
			return diags
		}
		state.CustomCloudNames = vCustomCloudNames
	}
	if api.CustomTags != nil && (len(*api.CustomTags) > 0 || !state.CustomTags.IsNull()) {
		vCustomTags, diags := types.MapValueFrom(ctx, types.StringType, api.CustomTags)
		if diags.HasError() {
			return diags
		}
		state.CustomTags = vCustomTags
	}
	if api.Errors != nil {
		vErrors, diags := util.FlattenSetNested(ctx, flattenErrors, *api.Errors, attrsErrors())
		if diags.HasError() {
			return diags
		}
		state.Errors = vErrors
	}
	if api.SubnetsBastion != nil && (len(*api.SubnetsBastion) > 0 || !state.SubnetsBastion.IsNull()) {
		vSubnetsBastion, diags := util.FlattenMapNested(ctx, flattenSubnetsBastion, *api.SubnetsBastion, attrsSubnetsBastion())
		if diags.HasError() {
			return diags
		}
		state.SubnetsBastion = vSubnetsBastion
	}
	if api.SubnetsWorkload != nil && (len(*api.SubnetsWorkload) > 0 || !state.SubnetsWorkload.IsNull()) {
		vSubnetsWorkload, diags := util.FlattenMapNested(ctx, flattenSubnetsWorkload, *api.SubnetsWorkload, attrsSubnetsWorkload())
		if diags.HasError() {
			return diags
		}
		state.SubnetsWorkload = vSubnetsWorkload
	}
	if api.AivenAssumeRoleExternalID != nil && (*api.AivenAssumeRoleExternalID != "" || !state.AivenAssumeRoleExternalID.IsNull()) {
		state.AivenAssumeRoleExternalID = types.StringPointerValue(api.AivenAssumeRoleExternalID)
	}
	if api.AivenAwsAccountPrincipal != nil && (*api.AivenAwsAccountPrincipal != "" || !state.AivenAwsAccountPrincipal.IsNull()) {
		state.AivenAwsAccountPrincipal = types.StringPointerValue(api.AivenAwsAccountPrincipal)
	}
	if api.AivenObjectStorageUserArn != nil && (*api.AivenObjectStorageUserArn != "" || !state.AivenObjectStorageUserArn.IsNull()) {
		state.AivenObjectStorageUserArn = types.StringPointerValue(api.AivenObjectStorageUserArn)
	}
	if api.AwsIamRoleArn != nil && (*api.AwsIamRoleArn != "" || !state.AwsIamRoleArn.IsNull()) {
		state.AwsIamRoleArn = types.StringPointerValue(api.AwsIamRoleArn)
	}
	if api.ByocName != nil && (*api.ByocName != "" || !state.ByocName.IsNull()) {
		state.ByocName = types.StringPointerValue(api.ByocName)
	}
	if api.CloudProvider != nil && (*api.CloudProvider != "" || !state.CloudProvider.IsNull()) {
		state.CloudProvider = types.StringPointerValue(api.CloudProvider)
	}
	if api.CloudRegion != nil && (*api.CloudRegion != "" || !state.CloudRegion.IsNull()) {
		state.CloudRegion = types.StringPointerValue(api.CloudRegion)
	}
	if api.CustomCloudEnvironmentID != nil && (*api.CustomCloudEnvironmentID != "" || !state.CustomCloudEnvironmentID.IsNull()) {
		state.CustomCloudEnvironmentID = types.StringPointerValue(api.CustomCloudEnvironmentID)
	}
	if api.DeploymentModel != nil && (*api.DeploymentModel != "" || !state.DeploymentModel.IsNull()) {
		state.DeploymentModel = types.StringPointerValue(api.DeploymentModel)
	}
	if api.DisplayName != nil && (*api.DisplayName != "" || !state.DisplayName.IsNull()) {
		state.DisplayName = types.StringPointerValue(api.DisplayName)
	}
	if api.OrganizationID != nil && (*api.OrganizationID != "" || !state.OrganizationID.IsNull()) {
		state.OrganizationID = types.StringPointerValue(api.OrganizationID)
	}
	if api.ReservedCidr != nil && (*api.ReservedCidr != "" || !state.ReservedCidr.IsNull()) {
		state.ReservedCidr = types.StringPointerValue(api.ReservedCidr)
	}
	if api.State != nil && (*api.State != "" || !state.State.IsNull()) {
		state.State = types.StringPointerValue(api.State)
	}
	if api.UpdateTime != nil && (*api.UpdateTime != "" || !state.UpdateTime.IsNull()) {
		state.UpdateTime = types.StringPointerValue(api.UpdateTime)
	}
	if api.UseCustomerOwnedStorage != nil {
		state.UseCustomerOwnedStorage = types.BoolPointerValue(api.UseCustomerOwnedStorage)
	}
	// Response may not contain ID fields.
	// In that case, `terraform import` won't be able to set them. Gets values from the ID.
	if state.ID.ValueString() != "" {
		var parts [2]string
		for i, v := range strings.SplitN(state.ID.ValueString(), "/", 2) {
			parts[i] = v
		}
		if state.OrganizationID.ValueString() == "" {
			state.OrganizationID = types.StringValue(parts[0])
		}
		if state.DisplayName.ValueString() == "" {
			state.DisplayName = types.StringValue(parts[1])
		}
	}
	state.SetID(state.OrganizationID.ValueString(), state.DisplayName.ValueString())
	return nil
}

func flattenBucketNames(ctx context.Context, api *apiModelBucketNames) (*tfModelBucketNames, diag.Diagnostics) {
	state := new(tfModelBucketNames)
	if api.Backup != nil {
		state.Backup = types.StringPointerValue(api.Backup)
	}
	if api.Tiered != nil {
		state.Tiered = types.StringPointerValue(api.Tiered)
	}
	return state, nil
}

func flattenContactEmails(ctx context.Context, api *apiModelContactEmails) (*tfModelContactEmails, diag.Diagnostics) {
	state := new(tfModelContactEmails)
	if api.Email != nil {
		state.Email = types.StringPointerValue(api.Email)
	}
	if api.RealName != nil {
		state.RealName = types.StringPointerValue(api.RealName)
	}
	if api.Role != nil {
		state.Role = types.StringPointerValue(api.Role)
	}
	return state, nil
}

func flattenErrors(ctx context.Context, api *apiModelErrors) (*tfModelErrors, diag.Diagnostics) {
	state := new(tfModelErrors)
	if api.Category != nil {
		state.Category = types.StringPointerValue(api.Category)
	}
	if api.Message != nil {
		state.Message = types.StringPointerValue(api.Message)
	}
	return state, nil
}

func flattenSubnetsBastion(ctx context.Context, api *apiModelSubnetsBastion) (*tfModelSubnetsBastion, diag.Diagnostics) {
	state := new(tfModelSubnetsBastion)
	if api.AvailabilityZone != nil {
		state.AvailabilityZone = types.StringPointerValue(api.AvailabilityZone)
	}
	if api.Cidr != nil {
		state.Cidr = types.StringPointerValue(api.Cidr)
	}
	return state, nil
}

func flattenSubnetsWorkload(ctx context.Context, api *apiModelSubnetsWorkload) (*tfModelSubnetsWorkload, diag.Diagnostics) {
	state := new(tfModelSubnetsWorkload)
	if api.AvailabilityZone != nil {
		state.AvailabilityZone = types.StringPointerValue(api.AvailabilityZone)
	}
	if api.Cidr != nil {
		state.Cidr = types.StringPointerValue(api.Cidr)
	}
	return state, nil
}

func attrsBucketNames() types.ObjectType {
	return types.ObjectType{AttrTypes: map[string]attr.Type{
		"backup": types.StringType,
		"tiered": types.StringType,
	}}
}

func attrsContactEmails() types.ObjectType {
	return types.ObjectType{AttrTypes: map[string]attr.Type{
		"email":     types.StringType,
		"real_name": types.StringType,
		"role":      types.StringType,
	}}
}

func attrsErrors() types.ObjectType {
	return types.ObjectType{AttrTypes: map[string]attr.Type{
		"category": types.StringType,
		"message":  types.StringType,
	}}
}

func attrsSubnetsBastion() types.ObjectType {
	return types.ObjectType{AttrTypes: map[string]attr.Type{
		"availability_zone": types.StringType,
		"cidr":              types.StringType,
	}}
}

func attrsSubnetsWorkload() types.ObjectType {
	return types.ObjectType{AttrTypes: map[string]attr.Type{
		"availability_zone": types.StringType,
		"cidr":              types.StringType,
	}}
}
