// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package planlist

import (
	"context"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

const typeName = "aiven_service_plan_list"

type tfModel struct {
	ID           types.String `tfsdk:"id"`
	Project      types.String `tfsdk:"project"`
	ServicePlans types.List   `tfsdk:"service_plans"`
	ServiceType  types.String `tfsdk:"service_type"`
}

func (tf *tfModel) SetID(vProject string, vServiceType string) {
	tf.Project = types.StringValue(vProject)
	tf.ServiceType = types.StringValue(vServiceType)
	tf.ID = types.StringValue(filepath.Join(vProject, vServiceType))
}

type tfModelServicePlans struct {
	CloudNames  types.List   `tfsdk:"cloud_names"`
	ServicePlan types.String `tfsdk:"service_plan"`
}

type apiModel struct {
	Project      *string                  `json:"project,omitempty"`
	ServicePlans *[]*apiModelServicePlans `json:"service_plans,omitempty"`
	ServiceType  *string                  `json:"service_type,omitempty"`
}

type apiModelServicePlans struct {
	CloudNames  *[]string `json:"cloud_names,omitempty"`
	ServicePlan *string   `json:"service_plan,omitempty"`
}

// flattenData turns Response into TF object
func flattenData[R any](ctx context.Context, state *tfModel, rsp *R, modifiers ...util.MapModifier[R]) diag.Diagnostics {
	api := new(apiModel)
	err := util.Remarshal(rsp, api, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Remarshal error", fmt.Sprintf("Failed to remarshal Response to dtoModel: %s", err.Error()))
		return diags
	}
	if api.ServicePlans != nil {
		vServicePlans, diags := util.FlattenListNested(ctx, flattenServicePlans, *api.ServicePlans, attrsServicePlans())
		if diags.HasError() {
			return diags
		}
		state.ServicePlans = vServicePlans
	}
	if api.Project != nil && (*api.Project != "" || !state.Project.IsNull()) {
		state.Project = types.StringPointerValue(api.Project)
	}
	if api.ServiceType != nil && (*api.ServiceType != "" || !state.ServiceType.IsNull()) {
		state.ServiceType = types.StringPointerValue(api.ServiceType)
	}
	// Response may not contain ID fields.
	// In that case, `terraform import` won't be able to set them. Gets values from the ID.
	if state.ID.ValueString() != "" {
		var parts [2]string
		for i, v := range strings.SplitN(state.ID.ValueString(), "/", 2) {
			parts[i] = v
		}
		if state.Project.ValueString() == "" {
			state.Project = types.StringValue(parts[0])
		}
		if state.ServiceType.ValueString() == "" {
			state.ServiceType = types.StringValue(parts[1])
		}
	}
	state.SetID(state.Project.ValueString(), state.ServiceType.ValueString())
	return nil
}

func flattenServicePlans(ctx context.Context, api *apiModelServicePlans) (*tfModelServicePlans, diag.Diagnostics) {
	state := new(tfModelServicePlans)
	if api.CloudNames != nil {
		vCloudNames, diags := types.ListValueFrom(ctx, types.StringType, api.CloudNames)
		if diags.HasError() {
			return nil, diags
		}
		state.CloudNames = vCloudNames
	}
	if api.ServicePlan != nil {
		state.ServicePlan = types.StringPointerValue(api.ServicePlan)
	}
	return state, nil
}

func attrsServicePlans() types.ObjectType {
	return types.ObjectType{AttrTypes: map[string]attr.Type{
		"cloud_names":  types.ListType{ElemType: types.StringType},
		"service_plan": types.StringType,
	}}
}
