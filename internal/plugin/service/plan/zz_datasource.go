// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package plan

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/datasource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// datasourceModel with specific datasource timeouts
type datasourceModel struct {
	tfModel
	Timeouts timeouts.Value `tfsdk:"timeouts"`
}

func (tf *datasourceModel) SharedModel() *tfModel {
	return &tf.tfModel
}

func (tf *datasourceModel) TimeoutsObject() types.Object {
	return tf.Timeouts.Object
}

/*
datasourceSchema:

	data "aiven_service_plan" "example" {
	  project      = "foo"
	  service_type = "foo"
	  service_plan = "foo"
	  cloud_name   = "test"

	  // COMPUTED FIELDS
	  backup_config {
	    frequent_interval_minutes     = 42
	    frequent_oldest_age_minutes   = 42
	    infrequent_interval_minutes   = 42
	    infrequent_oldest_age_minutes = 42
	    interval                      = 42
	    max_count                     = 42
	    recovery_mode                 = "basic"
	  }
	  base_price_usd              = "foo"
	  disk_space_cap_mb           = 42
	  disk_space_mb               = 42
	  disk_space_step_mb          = 42
	  max_memory_percent          = 42
	  node_count                  = 42
	  object_storage_gb_price_usd = "foo"
	  shard_count                 = 42
	}
*/
func datasourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"base_price_usd": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Hourly service price in this region in USD.",
			},
			"cloud_name": schema.StringAttribute{
				MarkdownDescription: "Cloud region name.",
				Required:            true,
			},
			"disk_space_cap_mb": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "Maximum amount of disk space possible for the plan in the given region.",
			},
			"disk_space_mb": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "Combined amount of service disk space of all service nodes in megabytes.",
			},
			"disk_space_step_mb": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "Disk space change step size.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Resource ID, a composite of `project`, `service_type`, `service_plan` and `cloud_name` IDs.",
			},
			"max_memory_percent": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "Maximum amount of system memory as a percentage (0-100) the service can actually use after taking into account management overhead. This is relevant for memory bound services for which some service management operations require allocating proportional amount of memory on top the basic load.",
			},
			"node_count": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "Number of nodes in this service plan.",
			},
			"object_storage_gb_price_usd": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Hourly object storage price per GiB in this region in USD.",
			},
			"project": schema.StringAttribute{
				MarkdownDescription: "Project name.",
				Required:            true,
			},
			"service_plan": schema.StringAttribute{
				MarkdownDescription: "Service plan name.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(128)},
			},
			"service_type": schema.StringAttribute{
				MarkdownDescription: "Service type code.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(64)},
			},
			"shard_count": schema.Int64Attribute{
				Computed:            true,
				MarkdownDescription: "Number of shards in this service plan.",
			},
		},
		Blocks: map[string]schema.Block{
			"backup_config": schema.ListNestedBlock{
				MarkdownDescription: "Backup configuration for this service plan.",
				NestedObject: schema.NestedBlockObject{Attributes: map[string]schema.Attribute{
					"frequent_interval_minutes": schema.Int64Attribute{
						Computed:            true,
						MarkdownDescription: "Interval of taking a frequent backup in service types supporting different backup schedules.",
					},
					"frequent_oldest_age_minutes": schema.Int64Attribute{
						Computed:            true,
						MarkdownDescription: "Maximum age of the oldest frequent backup in service types supporting different backup schedules.",
					},
					"infrequent_interval_minutes": schema.Int64Attribute{
						Computed:            true,
						MarkdownDescription: "Interval of taking an infrequent backup in service types supporting different backup schedules.",
					},
					"infrequent_oldest_age_minutes": schema.Int64Attribute{
						Computed:            true,
						MarkdownDescription: "Maximum age of the oldest infrequent backup in service types supporting different backup schedules.",
					},
					"interval": schema.Int64Attribute{
						Computed:            true,
						MarkdownDescription: "The interval, in hours, at which backups are generated. For some services, like PostgreSQL, this is the interval at which full snapshots are taken and continuous incremental backup stream is maintained in addition to that.",
					},
					"max_count": schema.Int64Attribute{
						Computed:            true,
						MarkdownDescription: "Maximum number of backups to keep. Zero when no backups are created.",
					},
					"recovery_mode": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Mechanism how backups can be restored. 'basic' means a backup is restored as is so that the system is restored to the state it was when the backup was generated. 'pitr' means point-in-time-recovery, which allows restoring the system to any state since the first available full snapshot. The possible values are `basic` and `pitr`.",
					},
				}},
			},
			"timeouts": timeouts.Block(ctx),
		},
		MarkdownDescription: "Gets detailed information about a specific service plan, including specifications and pricing for a cloud region.",
	}
}
