// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package organizationaddress

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

func idFields() []string {
	return []string{"organization_id", "address_id"}
}

// modelOrganizationaddress Gets information about an organization address.
type dataModel struct {
	ID             types.String `tfsdk:"id"`
	AddressID      types.String `tfsdk:"address_id"`
	AddressLines   types.Set    `tfsdk:"address_lines"`
	City           types.String `tfsdk:"city"`
	CompanyName    types.String `tfsdk:"company_name"`
	CountryCode    types.String `tfsdk:"country_code"`
	CreateTime     types.String `tfsdk:"create_time"`
	OrganizationID types.String `tfsdk:"organization_id"`
	State          types.String `tfsdk:"state"`
	UpdateTime     types.String `tfsdk:"update_time"`
	ZipCode        types.String `tfsdk:"zip_code"`
}

// expandData turns TF object into Request
func expandData(ctx context.Context, obj *dataModel, rqs any, modifiers ...util.MapModifier) diag.Diagnostics {
	var diags diag.Diagnostics
	m := make(map[string]any)
	if !obj.AddressLines.IsNull() {
		m["address_lines"] = util.ExpandSet[string](ctx, diags, obj.AddressLines)
		if diags.HasError() {
			return diags
		}
	}
	if !obj.AddressID.IsNull() {
		m["address_id"] = obj.AddressID.ValueString()
	}
	if !obj.City.IsNull() {
		m["city"] = obj.City.ValueString()
	}
	if !obj.CompanyName.IsNull() {
		m["company_name"] = obj.CompanyName.ValueString()
	}
	if !obj.CountryCode.IsNull() {
		m["country_code"] = obj.CountryCode.ValueString()
	}
	if !obj.CreateTime.IsNull() {
		m["create_time"] = obj.CreateTime.ValueString()
	}
	if !obj.OrganizationID.IsNull() {
		m["organization_id"] = obj.OrganizationID.ValueString()
	}
	if !obj.State.IsNull() {
		m["state"] = obj.State.ValueString()
	}
	if !obj.UpdateTime.IsNull() {
		m["update_time"] = obj.UpdateTime.ValueString()
	}
	if !obj.ZipCode.IsNull() {
		m["zip_code"] = obj.ZipCode.ValueString()
	}
	for _, modify := range modifiers {
		err := modify(m)
		if err != nil {
			diags.AddError("Modifier error", fmt.Sprintf("Failed to modify Response: %s", err.Error()))
			return diags
		}
	}
	err := util.Unmarshal(&m, rqs)
	if err != nil {
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal map to Request: %s", err.Error()))
		return diags
	}
	return diags
}

// flattenData turns Response into TF object
func flattenData(ctx context.Context, obj *dataModel, rsp any, modifiers ...util.MapModifier) diag.Diagnostics {
	var diags diag.Diagnostics
	m := make(map[string]any)
	err := util.Unmarshal(rsp, &m)
	if err != nil {
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal Response to map: %s", err.Error()))
		return diags
	}
	for _, modify := range modifiers {
		err := modify(m)
		if err != nil {
			diags.AddError("Modifier error", fmt.Sprintf("Failed to modify Response: %s", err.Error()))
			return diags
		}
	}
	if v, ok := m["address_lines"]; ok {
		set, d := types.SetValueFrom(ctx, types.StringType, v)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		obj.AddressLines = set
	}
	if v, ok := m["address_id"]; ok {
		obj.AddressID = types.StringValue(v.(string))
	}
	if v, ok := m["city"]; ok {
		obj.City = types.StringValue(v.(string))
	}
	if v, ok := m["company_name"]; ok {
		obj.CompanyName = types.StringValue(v.(string))
	}
	if v, ok := m["country_code"]; ok {
		obj.CountryCode = types.StringValue(v.(string))
	}
	if v, ok := m["create_time"]; ok {
		obj.CreateTime = types.StringValue(v.(string))
	}
	if v, ok := m["organization_id"]; ok {
		obj.OrganizationID = types.StringValue(v.(string))
	}
	if v, ok := m["state"]; ok {
		obj.State = types.StringValue(v.(string))
	}
	if v, ok := m["update_time"]; ok {
		obj.UpdateTime = types.StringValue(v.(string))
	}
	if v, ok := m["zip_code"]; ok {
		obj.ZipCode = types.StringValue(v.(string))
	}
	// Response may not contain ID fields.
	// In that case, `terraform import` won't be able to set them. Gets values from the ID.
	if obj.ID.ValueString() != "" {
		var parts [2]string
		for i, v := range strings.SplitN(obj.ID.ValueString(), "/", 2) {
			parts[i] = v
		}
		if obj.OrganizationID.ValueString() == "" {
			obj.OrganizationID = types.StringValue(parts[0])
		}
		if obj.AddressID.ValueString() == "" {
			obj.AddressID = types.StringValue(parts[1])
		}
	}
	obj.ID = types.StringValue(fmt.Sprintf("%s/%s", obj.OrganizationID.ValueString(), obj.AddressID.ValueString()))
	return diags
}
