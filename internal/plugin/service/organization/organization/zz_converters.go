// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package organization

import (
	"context"
	"fmt"
	"path/filepath"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

func idFields() []string {
	return []string{"id"}
}

// dataModel Gets information about an organization.
type dataModel struct {
	ID         types.String `tfsdk:"id"`
	CreateTime types.String `tfsdk:"create_time"`
	Name       types.String `tfsdk:"name"`
	TenantID   types.String `tfsdk:"tenant_id"`
	UpdateTime types.String `tfsdk:"update_time"`
}

func (data *dataModel) SetID(vID string) {
	data.ID = types.StringValue(filepath.Join(vID))
}

type dtoModel struct {
	CreateTime *string `json:"create_time,omitempty"`
	ID         *string `json:"organization_id,omitempty"`
	Name       *string `json:"account_name"`
	TenantID   *string `json:"tenant_id,omitempty"`
	UpdateTime *string `json:"update_time,omitempty"`
}

// expandData turns TF object into Request
func expandData[R any](ctx context.Context, data *dataModel, rqs *R, modifiers ...util.MapModifier[dtoModel]) diag.Diagnostics {
	dto := new(dtoModel)
	if !data.Name.IsNull() {
		dto.Name = data.Name.ValueStringPointer()
	}
	err := util.Unmarshal(dto, rqs, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal dtoModel to Request: %s", err.Error()))
		return diags
	}
	return nil
}

// flattenData turns Response into TF object
func flattenData[R any](ctx context.Context, data *dataModel, rsp *R, modifiers ...util.MapModifier[R]) diag.Diagnostics {
	dto := new(dtoModel)
	err := util.Unmarshal(rsp, dto, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal Response to dtoModel: %s", err.Error()))
		return diags
	}
	if dto.CreateTime != nil {
		data.CreateTime = types.StringPointerValue(dto.CreateTime)
	}
	if dto.ID != nil {
		data.ID = types.StringPointerValue(dto.ID)
	}
	if dto.Name != nil {
		data.Name = types.StringPointerValue(dto.Name)
	}
	if dto.TenantID != nil {
		data.TenantID = types.StringPointerValue(dto.TenantID)
	}
	if dto.UpdateTime != nil {
		data.UpdateTime = types.StringPointerValue(dto.UpdateTime)
	}
	return nil
}
