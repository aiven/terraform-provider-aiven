// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package billinggroup

import (
	"context"
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

func idFields() []string {
	return []string{"organization_id", "billing_group_id"}
}

// dataModel Gets information about a billing group.
type dataModel struct {
	ID                   types.String `tfsdk:"id"`
	BillingAddressID     types.String `tfsdk:"billing_address_id"`
	BillingContactEmails types.Set    `tfsdk:"billing_contact_emails"`
	BillingCurrency      types.String `tfsdk:"billing_currency"`
	BillingEmails        types.Set    `tfsdk:"billing_emails"`
	BillingGroupID       types.String `tfsdk:"billing_group_id"`
	BillingGroupName     types.String `tfsdk:"billing_group_name"`
	CustomInvoiceText    types.String `tfsdk:"custom_invoice_text"`
	OrganizationID       types.String `tfsdk:"organization_id"`
	PaymentMethodID      types.String `tfsdk:"payment_method_id"`
	ShippingAddressID    types.String `tfsdk:"shipping_address_id"`
	VatID                types.String `tfsdk:"vat_id"`
}

type dtoModel struct {
	BillingAddressID     *string   `json:"billing_address_id"`
	BillingContactEmails *[]string `json:"billing_contact_emails"`
	BillingCurrency      *string   `json:"billing_currency,omitempty"`
	BillingEmails        *[]string `json:"billing_emails"`
	BillingGroupID       *string   `json:"billing_group_id,omitempty"`
	BillingGroupName     *string   `json:"billing_group_name"`
	CustomInvoiceText    *string   `json:"custom_invoice_text,omitempty"`
	OrganizationID       *string   `json:"organization_id"`
	PaymentMethodID      *string   `json:"payment_method_id"`
	ShippingAddressID    *string   `json:"shipping_address_id"`
	VatID                *string   `json:"vat_id,omitempty"`
}

// expandData turns TF object into Request
func expandData[R any](ctx context.Context, data *dataModel, rqs *R, modifiers ...util.MapModifier[dtoModel]) diag.Diagnostics {
	dto := new(dtoModel)
	if !data.BillingContactEmails.IsNull() {
		var vBillingContactEmails []string
		diags := data.BillingContactEmails.ElementsAs(ctx, &vBillingContactEmails, false)
		if diags.HasError() {
			return diags
		}
		dto.BillingContactEmails = &vBillingContactEmails
	}
	if !data.BillingEmails.IsNull() {
		var vBillingEmails []string
		diags := data.BillingEmails.ElementsAs(ctx, &vBillingEmails, false)
		if diags.HasError() {
			return diags
		}
		dto.BillingEmails = &vBillingEmails
	}
	if !data.BillingAddressID.IsNull() {
		dto.BillingAddressID = data.BillingAddressID.ValueStringPointer()
	}
	if !data.BillingCurrency.IsNull() {
		dto.BillingCurrency = data.BillingCurrency.ValueStringPointer()
	}
	if !data.BillingGroupName.IsNull() {
		dto.BillingGroupName = data.BillingGroupName.ValueStringPointer()
	}
	if !data.CustomInvoiceText.IsNull() {
		dto.CustomInvoiceText = data.CustomInvoiceText.ValueStringPointer()
	}
	if !data.OrganizationID.IsNull() {
		dto.OrganizationID = data.OrganizationID.ValueStringPointer()
	}
	if !data.PaymentMethodID.IsNull() {
		dto.PaymentMethodID = data.PaymentMethodID.ValueStringPointer()
	}
	if !data.ShippingAddressID.IsNull() {
		dto.ShippingAddressID = data.ShippingAddressID.ValueStringPointer()
	}
	if !data.VatID.IsNull() {
		dto.VatID = data.VatID.ValueStringPointer()
	}
	err := util.Unmarshal(dto, rqs, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal dtoModel to Request: %s", err.Error()))
		return diags
	}
	return nil
}

// flattenData turns Response into TF object
func flattenData[R any](ctx context.Context, data *dataModel, rsp *R, modifiers ...util.MapModifier[R]) diag.Diagnostics {
	dto := new(dtoModel)
	err := util.Unmarshal(rsp, dto, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal Response to dtoModel: %s", err.Error()))
		return diags
	}
	if dto.BillingContactEmails != nil {
		vBillingContactEmails, diags := types.SetValueFrom(ctx, types.StringType, dto.BillingContactEmails)
		if diags.HasError() {
			return diags
		}
		data.BillingContactEmails = vBillingContactEmails
	}
	if dto.BillingEmails != nil {
		vBillingEmails, diags := types.SetValueFrom(ctx, types.StringType, dto.BillingEmails)
		if diags.HasError() {
			return diags
		}
		data.BillingEmails = vBillingEmails
	}
	if dto.BillingAddressID != nil {
		data.BillingAddressID = types.StringPointerValue(dto.BillingAddressID)
	}
	if dto.BillingCurrency != nil {
		data.BillingCurrency = types.StringPointerValue(dto.BillingCurrency)
	}
	if dto.BillingGroupID != nil {
		data.BillingGroupID = types.StringPointerValue(dto.BillingGroupID)
	}
	if dto.BillingGroupName != nil {
		data.BillingGroupName = types.StringPointerValue(dto.BillingGroupName)
	}
	if dto.CustomInvoiceText != nil {
		data.CustomInvoiceText = types.StringPointerValue(dto.CustomInvoiceText)
	}
	if dto.OrganizationID != nil {
		data.OrganizationID = types.StringPointerValue(dto.OrganizationID)
	}
	if dto.PaymentMethodID != nil {
		data.PaymentMethodID = types.StringPointerValue(dto.PaymentMethodID)
	}
	if dto.ShippingAddressID != nil {
		data.ShippingAddressID = types.StringPointerValue(dto.ShippingAddressID)
	}
	if dto.VatID != nil {
		data.VatID = types.StringPointerValue(dto.VatID)
	}
	// Response may not contain ID fields.
	// In that case, `terraform import` won't be able to set them. Gets values from the ID.
	if data.ID.ValueString() != "" {
		var parts [2]string
		for i, v := range strings.SplitN(data.ID.ValueString(), "/", 2) {
			parts[i] = v
		}
		if data.OrganizationID.ValueString() == "" {
			data.OrganizationID = types.StringValue(parts[0])
		}
		if data.BillingGroupID.ValueString() == "" {
			data.BillingGroupID = types.StringValue(parts[1])
		}
	}
	data.ID = types.StringValue(fmt.Sprintf("%s/%s", data.OrganizationID.ValueString(), data.BillingGroupID.ValueString()))
	return nil
}
