// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package billinggroup

import (
	"context"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

func idFields() []string {
	return []string{"organization_id", "billing_group_id"}
}

// dataModel Gets information about a billing group.
type dataModel struct {
	ID                   types.String `tfsdk:"id"`
	BillingAddressID     types.String `tfsdk:"billing_address_id"`
	BillingContactEmails types.Set    `tfsdk:"billing_contact_emails"`
	BillingCurrency      types.String `tfsdk:"billing_currency"`
	BillingEmails        types.Set    `tfsdk:"billing_emails"`
	BillingGroupID       types.String `tfsdk:"billing_group_id"`
	BillingGroupName     types.String `tfsdk:"billing_group_name"`
	CustomInvoiceText    types.String `tfsdk:"custom_invoice_text"`
	OrganizationID       types.String `tfsdk:"organization_id"`
	PaymentMethodID      types.String `tfsdk:"payment_method_id"`
	ShippingAddressID    types.String `tfsdk:"shipping_address_id"`
	VatID                types.String `tfsdk:"vat_id"`
}

func (data *dataModel) SetID(vOrganizationID string, vBillingGroupID string) {
	data.OrganizationID = types.StringValue(vOrganizationID)
	data.BillingGroupID = types.StringValue(vBillingGroupID)
	data.ID = types.StringValue(filepath.Join(vOrganizationID, vBillingGroupID))
}

type dtoModel struct {
	BillingAddressID     *string   `json:"billing_address_id,omitempty"`
	BillingContactEmails *[]string `json:"billing_contact_emails,omitempty"`
	BillingCurrency      *string   `json:"billing_currency,omitempty"`
	BillingEmails        *[]string `json:"billing_emails,omitempty"`
	BillingGroupID       *string   `json:"billing_group_id,omitempty"`
	BillingGroupName     *string   `json:"billing_group_name,omitempty"`
	CustomInvoiceText    *string   `json:"custom_invoice_text,omitempty"`
	OrganizationID       *string   `json:"organization_id,omitempty"`
	PaymentMethodID      *string   `json:"payment_method_id,omitempty"`
	ShippingAddressID    *string   `json:"shipping_address_id,omitempty"`
	VatID                *string   `json:"vat_id,omitempty"`
}

// expandData turns TF object into Request
func expandData[R any](ctx context.Context, plan, state *dataModel, rqs *R, modifiers ...util.MapModifier[dtoModel]) diag.Diagnostics {
	dto := new(dtoModel)
	if !plan.BillingContactEmails.IsNull() || state != nil && !state.BillingContactEmails.IsNull() {
		vBillingContactEmails := make([]string, 0)
		diags := plan.BillingContactEmails.ElementsAs(ctx, &vBillingContactEmails, false)
		if diags.HasError() {
			return diags
		}
		dto.BillingContactEmails = &vBillingContactEmails
	}
	if !plan.BillingEmails.IsNull() || state != nil && !state.BillingEmails.IsNull() {
		vBillingEmails := make([]string, 0)
		diags := plan.BillingEmails.ElementsAs(ctx, &vBillingEmails, false)
		if diags.HasError() {
			return diags
		}
		dto.BillingEmails = &vBillingEmails
	}
	if !plan.BillingAddressID.IsNull() || state != nil && !state.BillingAddressID.IsNull() {
		vBillingAddressID := plan.BillingAddressID.ValueString()
		dto.BillingAddressID = &vBillingAddressID
	}
	if !plan.BillingCurrency.IsNull() || state != nil && !state.BillingCurrency.IsNull() {
		vBillingCurrency := plan.BillingCurrency.ValueString()
		dto.BillingCurrency = &vBillingCurrency
	}
	if !plan.BillingGroupName.IsNull() || state != nil && !state.BillingGroupName.IsNull() {
		vBillingGroupName := plan.BillingGroupName.ValueString()
		dto.BillingGroupName = &vBillingGroupName
	}
	if !plan.CustomInvoiceText.IsNull() || state != nil && !state.CustomInvoiceText.IsNull() {
		vCustomInvoiceText := plan.CustomInvoiceText.ValueString()
		dto.CustomInvoiceText = &vCustomInvoiceText
	}
	if !plan.OrganizationID.IsNull() || state != nil && !state.OrganizationID.IsNull() {
		vOrganizationID := plan.OrganizationID.ValueString()
		dto.OrganizationID = &vOrganizationID
	}
	if !plan.PaymentMethodID.IsNull() || state != nil && !state.PaymentMethodID.IsNull() {
		vPaymentMethodID := plan.PaymentMethodID.ValueString()
		dto.PaymentMethodID = &vPaymentMethodID
	}
	if !plan.ShippingAddressID.IsNull() || state != nil && !state.ShippingAddressID.IsNull() {
		vShippingAddressID := plan.ShippingAddressID.ValueString()
		dto.ShippingAddressID = &vShippingAddressID
	}
	if !plan.VatID.IsNull() || state != nil && !state.VatID.IsNull() {
		vVatID := plan.VatID.ValueString()
		dto.VatID = &vVatID
	}
	err := util.Unmarshal(dto, rqs, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal dtoModel to Request: %s", err.Error()))
		return diags
	}
	return nil
}

// flattenData turns Response into TF object
func flattenData[R any](ctx context.Context, state *dataModel, rsp *R, modifiers ...util.MapModifier[R]) diag.Diagnostics {
	dto := new(dtoModel)
	err := util.Unmarshal(rsp, dto, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal Response to dtoModel: %s", err.Error()))
		return diags
	}
	if dto.BillingContactEmails != nil && (len(*dto.BillingContactEmails) > 0 || !state.BillingContactEmails.IsNull()) {
		vBillingContactEmails, diags := types.SetValueFrom(ctx, types.StringType, dto.BillingContactEmails)
		if diags.HasError() {
			return diags
		}
		state.BillingContactEmails = vBillingContactEmails
	}
	if dto.BillingEmails != nil && (len(*dto.BillingEmails) > 0 || !state.BillingEmails.IsNull()) {
		vBillingEmails, diags := types.SetValueFrom(ctx, types.StringType, dto.BillingEmails)
		if diags.HasError() {
			return diags
		}
		state.BillingEmails = vBillingEmails
	}
	if dto.BillingAddressID != nil && (*dto.BillingAddressID != "" || !state.BillingAddressID.IsNull()) {
		state.BillingAddressID = types.StringPointerValue(dto.BillingAddressID)
	}
	if dto.BillingCurrency != nil && (*dto.BillingCurrency != "" || !state.BillingCurrency.IsNull()) {
		state.BillingCurrency = types.StringPointerValue(dto.BillingCurrency)
	}
	if dto.BillingGroupID != nil && (*dto.BillingGroupID != "" || !state.BillingGroupID.IsNull()) {
		state.BillingGroupID = types.StringPointerValue(dto.BillingGroupID)
	}
	if dto.BillingGroupName != nil && (*dto.BillingGroupName != "" || !state.BillingGroupName.IsNull()) {
		state.BillingGroupName = types.StringPointerValue(dto.BillingGroupName)
	}
	if dto.CustomInvoiceText != nil && (*dto.CustomInvoiceText != "" || !state.CustomInvoiceText.IsNull()) {
		state.CustomInvoiceText = types.StringPointerValue(dto.CustomInvoiceText)
	}
	if dto.OrganizationID != nil && (*dto.OrganizationID != "" || !state.OrganizationID.IsNull()) {
		state.OrganizationID = types.StringPointerValue(dto.OrganizationID)
	}
	if dto.PaymentMethodID != nil && (*dto.PaymentMethodID != "" || !state.PaymentMethodID.IsNull()) {
		state.PaymentMethodID = types.StringPointerValue(dto.PaymentMethodID)
	}
	if dto.ShippingAddressID != nil && (*dto.ShippingAddressID != "" || !state.ShippingAddressID.IsNull()) {
		state.ShippingAddressID = types.StringPointerValue(dto.ShippingAddressID)
	}
	if dto.VatID != nil && (*dto.VatID != "" || !state.VatID.IsNull()) {
		state.VatID = types.StringPointerValue(dto.VatID)
	}
	// Response may not contain ID fields.
	// In that case, `terraform import` won't be able to set them. Gets values from the ID.
	if state.ID.ValueString() != "" {
		var parts [2]string
		for i, v := range strings.SplitN(state.ID.ValueString(), "/", 2) {
			parts[i] = v
		}
		if state.OrganizationID.ValueString() == "" {
			state.OrganizationID = types.StringValue(parts[0])
		}
		if state.BillingGroupID.ValueString() == "" {
			state.BillingGroupID = types.StringValue(parts[1])
		}
	}
	state.SetID(state.OrganizationID.ValueString(), state.BillingGroupID.ValueString())
	return nil
}
