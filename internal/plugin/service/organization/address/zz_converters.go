// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package address

import (
	"context"
	"fmt"
	"path/filepath"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

func idFields() []string {
	return []string{"organization_id", "address_id"}
}

// dataModel Gets information about an organization address.
type dataModel struct {
	ID             types.String `tfsdk:"id"`
	AddressID      types.String `tfsdk:"address_id"`
	AddressLines   types.Set    `tfsdk:"address_lines"`
	City           types.String `tfsdk:"city"`
	CompanyName    types.String `tfsdk:"company_name"`
	CountryCode    types.String `tfsdk:"country_code"`
	CreateTime     types.String `tfsdk:"create_time"`
	OrganizationID types.String `tfsdk:"organization_id"`
	State          types.String `tfsdk:"state"`
	UpdateTime     types.String `tfsdk:"update_time"`
	ZipCode        types.String `tfsdk:"zip_code"`
}

func (data *dataModel) SetID(vOrganizationID string, vAddressID string) {
	data.OrganizationID = types.StringValue(vOrganizationID)
	data.AddressID = types.StringValue(vAddressID)
	data.ID = types.StringValue(filepath.Join(vOrganizationID, vAddressID))
}

type dtoModel struct {
	AddressID      *string   `json:"address_id,omitempty"`
	AddressLines   *[]string `json:"address_lines"`
	City           *string   `json:"city"`
	CompanyName    *string   `json:"company_name,omitempty"`
	CountryCode    *string   `json:"country_code"`
	CreateTime     *string   `json:"create_time,omitempty"`
	OrganizationID *string   `json:"organization_id"`
	State          *string   `json:"state,omitempty"`
	UpdateTime     *string   `json:"update_time,omitempty"`
	ZipCode        *string   `json:"zip_code,omitempty"`
}

// expandData turns TF object into Request
func expandData[R any](ctx context.Context, data *dataModel, rqs *R, modifiers ...util.MapModifier[dtoModel]) diag.Diagnostics {
	dto := new(dtoModel)
	if !data.AddressLines.IsNull() {
		var vAddressLines []string
		diags := data.AddressLines.ElementsAs(ctx, &vAddressLines, false)
		if diags.HasError() {
			return diags
		}
		dto.AddressLines = &vAddressLines
	}
	if !data.City.IsNull() {
		dto.City = data.City.ValueStringPointer()
	}
	if !data.CompanyName.IsNull() {
		dto.CompanyName = data.CompanyName.ValueStringPointer()
	}
	if !data.CountryCode.IsNull() {
		dto.CountryCode = data.CountryCode.ValueStringPointer()
	}
	if !data.OrganizationID.IsNull() {
		dto.OrganizationID = data.OrganizationID.ValueStringPointer()
	}
	if !data.State.IsNull() {
		dto.State = data.State.ValueStringPointer()
	}
	if !data.ZipCode.IsNull() {
		dto.ZipCode = data.ZipCode.ValueStringPointer()
	}
	err := util.Unmarshal(dto, rqs, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal dtoModel to Request: %s", err.Error()))
		return diags
	}
	return nil
}

// flattenData turns Response into TF object
func flattenData[R any](ctx context.Context, data *dataModel, rsp *R, modifiers ...util.MapModifier[R]) diag.Diagnostics {
	dto := new(dtoModel)
	err := util.Unmarshal(rsp, dto, modifiers...)
	if err != nil {
		var diags diag.Diagnostics
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal Response to dtoModel: %s", err.Error()))
		return diags
	}
	if dto.AddressLines != nil {
		vAddressLines, diags := types.SetValueFrom(ctx, types.StringType, dto.AddressLines)
		if diags.HasError() {
			return diags
		}
		data.AddressLines = vAddressLines
	}
	if dto.AddressID != nil {
		data.AddressID = types.StringPointerValue(dto.AddressID)
	}
	if dto.City != nil {
		data.City = types.StringPointerValue(dto.City)
	}
	if dto.CompanyName != nil {
		data.CompanyName = types.StringPointerValue(dto.CompanyName)
	}
	if dto.CountryCode != nil {
		data.CountryCode = types.StringPointerValue(dto.CountryCode)
	}
	if dto.CreateTime != nil {
		data.CreateTime = types.StringPointerValue(dto.CreateTime)
	}
	if dto.OrganizationID != nil {
		data.OrganizationID = types.StringPointerValue(dto.OrganizationID)
	}
	if dto.State != nil {
		data.State = types.StringPointerValue(dto.State)
	}
	if dto.UpdateTime != nil {
		data.UpdateTime = types.StringPointerValue(dto.UpdateTime)
	}
	if dto.ZipCode != nil {
		data.ZipCode = types.StringPointerValue(dto.ZipCode)
	}
	// Response may not contain ID fields.
	// In that case, `terraform import` won't be able to set them. Gets values from the ID.
	if data.ID.ValueString() != "" {
		var parts [2]string
		for i, v := range strings.SplitN(data.ID.ValueString(), "/", 2) {
			parts[i] = v
		}
		if data.OrganizationID.ValueString() == "" {
			data.OrganizationID = types.StringValue(parts[0])
		}
		if data.AddressID.ValueString() == "" {
			data.AddressID = types.StringValue(parts[1])
		}
	}
	data.SetID(data.OrganizationID.ValueString(), data.AddressID.ValueString())
	return nil
}
