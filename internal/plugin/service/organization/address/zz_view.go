// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package address

import (
	"context"

	avngen "github.com/aiven/go-client-codegen"
	"github.com/aiven/go-client-codegen/handler/organization"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/adapter"
	"github.com/aiven/terraform-provider-aiven/internal/plugin/errmsg"
)

func NewResource() resource.Resource {
	return adapter.NewResource(adapter.ResourceOptions[*resourceModel, tfModel]{
		Create:       createView,
		Delete:       deleteView,
		IDFields:     idFields(),
		Read:         readView,
		RefreshState: false,
		Schema:       newResourceSchema,
		TypeName:     aivenName,
		Update:       updateView,
	})
}

func NewDatasource() datasource.DataSource {
	return adapter.NewDatasource(adapter.DatasourceOptions[*datasourceModel, tfModel]{
		Read:     readView,
		Schema:   newDatasourceSchema,
		TypeName: aivenName,
	})
}

func createView(ctx context.Context, client avngen.Client, plan *tfModel) diag.Diagnostics {
	var req organization.OrganizationAddressCreateIn
	diags := expandData(ctx, plan, nil, &req)
	if diags.HasError() {
		return diags
	}

	rsp, err := client.OrganizationAddressCreate(ctx, plan.OrganizationID.ValueString(), &req)
	if err != nil {
		return append(diags, errmsg.FromError("OrganizationAddressCreate Error", err))
	}

	return append(diags, flattenData(ctx, plan, rsp)...)
}

func updateView(ctx context.Context, client avngen.Client, plan, state, config *tfModel) diag.Diagnostics {
	var req organization.OrganizationAddressUpdateIn
	diags := expandData(ctx, plan, state, &req)
	if diags.HasError() {
		return diags
	}

	rsp, err := client.OrganizationAddressUpdate(ctx, state.OrganizationID.ValueString(), state.AddressID.ValueString(), &req)
	if err != nil {
		return append(diags, errmsg.FromError("OrganizationAddressUpdate Error", err))
	}

	return append(diags, flattenData(ctx, plan, rsp)...)
}

func readView(ctx context.Context, client avngen.Client, state *tfModel) diag.Diagnostics {
	var diags diag.Diagnostics
	rsp, err := client.OrganizationAddressGet(ctx, state.OrganizationID.ValueString(), state.AddressID.ValueString())
	if err != nil {
		return append(diags, errmsg.FromError("OrganizationAddressGet Error", err))
	}

	return append(diags, flattenData(ctx, state, rsp)...)
}

func deleteView(ctx context.Context, client avngen.Client, state *tfModel) diag.Diagnostics {
	var diags diag.Diagnostics
	err := client.OrganizationAddressDelete(ctx, state.OrganizationID.ValueString(), state.AddressID.ValueString())
	if err != nil {
		return append(diags, errmsg.FromError("OrganizationAddressDelete Error", err))
	}

	return diags
}
