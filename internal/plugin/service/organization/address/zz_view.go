// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package address

import (
	"context"

	avngen "github.com/aiven/go-client-codegen"
	"github.com/aiven/go-client-codegen/handler/organization"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/adapter"
)

func NewResource() resource.Resource {
	return adapter.NewResource(adapter.ResourceOptions[*resourceModel, tfModel]{
		Create:   createView,
		Delete:   deleteView,
		IDFields: idFields(),
		Read:     readView,
		Schema:   newResourceSchema,
		TypeName: aivenName,
		Update:   updateView,
	})
}

func NewDatasource() datasource.DataSource {
	return adapter.NewDatasource(adapter.DatasourceOptions[*datasourceModel, tfModel]{
		Read:     readView,
		Schema:   newDatasourceSchema,
		TypeName: aivenName,
	})
}

func createView(ctx context.Context, client avngen.Client, plan *tfModel) diag.Diagnostics {
	var req organization.OrganizationAddressCreateIn
	diags := expandData(ctx, plan, nil, &req)
	if diags.HasError() {
		return diags
	}

	rsp, err := client.OrganizationAddressCreate(ctx, plan.OrganizationID.ValueString(), &req)
	if err != nil {
		diags.AddError("OrganizationAddressCreate Error", err.Error())
		return diags
	}

	// The response may contain values that don't exist in the Read operation.
	// Additionally, the Read operation needs ID fields to format the URL, which may come from this response.
	diags.Append(flattenData(ctx, plan, rsp)...)
	if diags.HasError() {
		return diags
	}

	// Reads the remote state to sync and detect drift.
	return append(diags, readView(ctx, client, plan)...)
}

func updateView(ctx context.Context, client avngen.Client, plan, state, config *tfModel) diag.Diagnostics {
	var req organization.OrganizationAddressUpdateIn
	diags := expandData(ctx, plan, state, &req)
	if diags.HasError() {
		return diags
	}

	rsp, err := client.OrganizationAddressUpdate(ctx, state.OrganizationID.ValueString(), state.AddressID.ValueString(), &req)
	if err != nil {
		diags.AddError("OrganizationAddressUpdate Error", err.Error())
		return diags
	}

	// The response may contain values that don't exist in the Read operation.
	// Additionally, the Read operation needs ID fields to format the URL, which may come from this response.
	diags.Append(flattenData(ctx, plan, rsp)...)
	if diags.HasError() {
		return diags
	}

	// Reads the remote state to sync and detect drift.
	return append(diags, readView(ctx, client, plan)...)
}

func readView(ctx context.Context, client avngen.Client, state *tfModel) diag.Diagnostics {
	var diags diag.Diagnostics
	rsp, err := client.OrganizationAddressGet(ctx, state.OrganizationID.ValueString(), state.AddressID.ValueString())
	if err != nil {
		diags.AddError("OrganizationAddressGet Error", err.Error())
		return diags
	}

	return append(diags, flattenData(ctx, state, rsp)...)
}

func deleteView(ctx context.Context, client avngen.Client, state *tfModel) diag.Diagnostics {
	var diags diag.Diagnostics
	err := client.OrganizationAddressDelete(ctx, state.OrganizationID.ValueString(), state.AddressID.ValueString())
	if err != nil {
		diags.AddError("OrganizationAddressDelete Error", err.Error())
		return diags
	}

	return diags
}
