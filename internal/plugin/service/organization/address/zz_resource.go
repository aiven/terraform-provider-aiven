// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package address

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// resourceModel with specific resource timeouts
type resourceModel struct {
	tfModel
	Timeouts timeouts.Value `tfsdk:"timeouts"`
}

func (tf *resourceModel) SharedModel() *tfModel {
	return &tf.tfModel
}

func (tf *resourceModel) TimeoutsObject() types.Object {
	return tf.Timeouts.Object
}

/*
newResourceSchema:

	resource "aiven_organization_address" "example" {
	  organization_id = "org1a23f456789" // Force new
	  address_lines   = ["foo"]
	  city            = "foo"
	  country_code    = "foo"
	  name            = "test"
	  state           = "foo"
	  zip_code        = "foo"

	  // COMPUTED FIELDS
	  create_time = "foo"
	  update_time = "foo"
	  address_id  = "foo"
	}
*/
func newResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"address_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Address ID.",
			},
			"address_lines": schema.SetAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Address Lines.",
				Required:            true,
				Validators:          []validator.Set{setvalidator.SizeBetween(1, 5)},
			},
			"city": schema.StringAttribute{
				MarkdownDescription: "City.",
				Required:            true,
			},
			"country_code": schema.StringAttribute{
				MarkdownDescription: "Country Code.",
				Required:            true,
			},
			"create_time": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Create Time.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Resource ID, a composite of `organization_id` and `address_id` IDs.",
				PlanModifiers:       []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "Name of a company. Maximum length: `128`.",
				Required:            true,
				Validators:          []validator.String{stringvalidator.LengthBetween(1, 128)},
			},
			"organization_id": schema.StringAttribute{
				MarkdownDescription: "ID of an organization. Maximum length: `36`. Changing this property forces recreation of the resource.",
				PlanModifiers:       []planmodifier.String{stringplanmodifier.RequiresReplace()},
				Required:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(36)},
			},
			"state": schema.StringAttribute{
				MarkdownDescription: "State. Maximum length: `128`.",
				Optional:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(128)},
			},
			"update_time": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Update Time.",
			},
			"zip_code": schema.StringAttribute{
				MarkdownDescription: "Zip Code. Maximum length: `32`.",
				Optional:            true,
				Validators:          []validator.String{stringvalidator.LengthAtMost(32)},
			},
		},
		Blocks:              map[string]schema.Block{"timeouts": timeouts.BlockAll(ctx)},
		MarkdownDescription: "Creates and manages an organization address. \n\n**This resource is in the beta stage and may change without notice.** Set\nthe `PROVIDER_AIVEN_ENABLE_BETA` environment variable to use the resource.",
	}
}
