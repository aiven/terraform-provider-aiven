// Copyright (c) 2025 Aiven, Helsinki, Finland. https://aiven.io/
// Code generated by user config generator. DO NOT EDIT.

package billing

import (
	"context"
	"fmt"
	"strings"

	datasourcetimeouts "github.com/hashicorp/terraform-plugin-framework-timeouts/datasource/timeouts"
	resourcetimeouts "github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/aiven/terraform-provider-aiven/internal/plugin/util"
)

func billingDatasourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"billing_address_id": schema.StringAttribute{
				Computed:    true,
				Description: "Billing address ID.",
				Validators:  []validator.String{stringvalidator.LengthAtMost(36)},
			},
			"billing_contact_emails": schema.SetNestedAttribute{
				Computed:    true,
				Description: "List of billing contact emails.",
				NestedObject: schema.NestedAttributeObject{Attributes: map[string]schema.Attribute{"email": schema.StringAttribute{
					Computed:    true,
					Description: "Email.",
				}}},
			},
			"billing_currency": schema.StringAttribute{
				Computed:    true,
				Description: "Acceptable currencies for a billing group. The possible values are `AUD`, `CAD`, `CHF`, `DKK`, `EUR`, `GBP`, `JPY`, `NOK`, `NZD`, `SEK`, `SGD` and `USD`.",
				Validators:  []validator.String{stringvalidator.OneOf("AUD", "CAD", "CHF", "DKK", "EUR", "GBP", "JPY", "NOK", "NZD", "SEK", "SGD", "USD")},
			},
			"billing_emails": schema.SetNestedAttribute{
				Computed:    true,
				Description: "List of billing contact emails.",
				NestedObject: schema.NestedAttributeObject{Attributes: map[string]schema.Attribute{"email": schema.StringAttribute{
					Computed:    true,
					Description: "Email.",
				}}},
			},
			"billing_group_id": schema.StringAttribute{
				Description: "Billing group id.",
				Required:    true,
			},
			"billing_group_name": schema.StringAttribute{
				Computed:    true,
				Description: "Billing Group Name.",
				Validators:  []validator.String{stringvalidator.LengthAtMost(128)},
			},
			"custom_invoice_text": schema.StringAttribute{
				Computed:    true,
				Description: "Extra billing text.",
				Validators:  []validator.String{stringvalidator.LengthAtMost(254)},
			},
			"id": schema.StringAttribute{
				Computed:    true,
				Description: "Resource ID, a composite of `organization_id` and `billing_group_id` IDs.",
			},
			"organization_id": schema.StringAttribute{
				Description: "ID of an organization.",
				Required:    true,
				Validators:  []validator.String{stringvalidator.LengthAtMost(36)},
			},
			"payment_method_id": schema.StringAttribute{
				Computed:    true,
				Description: "Payment method ID.",
			},
			"shipping_address_id": schema.StringAttribute{
				Computed:    true,
				Description: "Shipping address ID.",
				Validators:  []validator.String{stringvalidator.LengthAtMost(36)},
			},
			"timeouts": datasourcetimeouts.Attributes(ctx),
			"vat_id": schema.StringAttribute{
				Computed:    true,
				Description: "VAT ID.",
			},
		},
		Description: "Gets information about a billing group.",
	}
}

type baseModelBilling struct {
	ID                   types.String `tfsdk:"id"`
	BillingAddressID     types.String `tfsdk:"billing_address_id"`
	BillingContactEmails types.Set    `tfsdk:"billing_contact_emails"`
	BillingCurrency      types.String `tfsdk:"billing_currency"`
	BillingEmails        types.Set    `tfsdk:"billing_emails"`
	BillingGroupID       types.String `tfsdk:"billing_group_id"`
	BillingGroupName     types.String `tfsdk:"billing_group_name"`
	CustomInvoiceText    types.String `tfsdk:"custom_invoice_text"`
	OrganizationID       types.String `tfsdk:"organization_id"`
	PaymentMethodID      types.String `tfsdk:"payment_method_id"`
	ShippingAddressID    types.String `tfsdk:"shipping_address_id"`
	VatID                types.String `tfsdk:"vat_id"`
}

type resourceModelBilling struct {
	baseModelBilling
	Timeouts resourcetimeouts.Value `tfsdk:"timeouts"`
}

type datasourceModelBilling struct {
	baseModelBilling
	Timeouts datasourcetimeouts.Value `tfsdk:"timeouts"`
}

type modelBillingContactEmails struct {
	Email types.String `tfsdk:"email"`
}

type modelBillingEmails struct {
	Email types.String `tfsdk:"email"`
}

// expandModelBilling turns TF object into DTO
func expandModelBilling(ctx context.Context, obj *baseModelBilling, dto any) diag.Diagnostics {
	var diags diag.Diagnostics
	m := make(map[string]any)
	if !obj.BillingContactEmails.IsNull() {
		m["billing_contact_emails"] = util.ExpandSetNestedAttribute(ctx, diags, expandModelBillingContactEmails, obj.BillingContactEmails)
		if diags.HasError() {
			return diags
		}
	}
	if !obj.BillingEmails.IsNull() {
		m["billing_emails"] = util.ExpandSetNestedAttribute(ctx, diags, expandModelBillingEmails, obj.BillingEmails)
		if diags.HasError() {
			return diags
		}
	}
	if !obj.BillingAddressID.IsNull() {
		m["billing_address_id"] = obj.BillingAddressID.ValueString()
	}
	if !obj.BillingCurrency.IsNull() {
		m["billing_currency"] = obj.BillingCurrency.ValueString()
	}
	if !obj.BillingGroupID.IsNull() {
		m["billing_group_id"] = obj.BillingGroupID.ValueString()
	}
	if !obj.BillingGroupName.IsNull() {
		m["billing_group_name"] = obj.BillingGroupName.ValueString()
	}
	if !obj.CustomInvoiceText.IsNull() {
		m["custom_invoice_text"] = obj.CustomInvoiceText.ValueString()
	}
	if !obj.OrganizationID.IsNull() {
		m["organization_id"] = obj.OrganizationID.ValueString()
	}
	if !obj.PaymentMethodID.IsNull() {
		m["payment_method_id"] = obj.PaymentMethodID.ValueString()
	}
	if !obj.ShippingAddressID.IsNull() {
		m["shipping_address_id"] = obj.ShippingAddressID.ValueString()
	}
	if !obj.VatID.IsNull() {
		m["vat_id"] = obj.VatID.ValueString()
	}
	err := util.Unmarshal(&m, dto)
	if err != nil {
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal map to DTO: %s", err.Error()))
		return diags
	}
	return diags
}

func expandModelBillingContactEmails(ctx context.Context, diags diag.Diagnostics, obj modelBillingContactEmails) map[string]any {
	m := make(map[string]any)
	if !obj.Email.IsNull() {
		m["email"] = obj.Email.ValueString()
	}
	return m
}

func expandModelBillingEmails(ctx context.Context, diags diag.Diagnostics, obj modelBillingEmails) map[string]any {
	m := make(map[string]any)
	if !obj.Email.IsNull() {
		m["email"] = obj.Email.ValueString()
	}
	return m
}

// flattenModelBilling turns DTO into TF object
func flattenModelBilling(ctx context.Context, obj *baseModelBilling, dto any) diag.Diagnostics {
	var diags diag.Diagnostics
	m := make(map[string]any)
	err := util.Unmarshal(dto, &m)
	if err != nil {
		diags.AddError("Unmarshal error", fmt.Sprintf("Failed to unmarshal DTO to map: %s", err.Error()))
		return diags
	}
	if v, ok := m["billing_contact_emails"]; ok {
		set, err := util.CastSlice[map[string]any](v)
		if err != nil {
			diags.AddError("Invalid type", fmt.Sprintf("%q: %s", "billing_contact_emails", err.Error()))
			return diags
		}
		attrs := map[string]attr.Type{"email": types.StringType}
		obj.BillingContactEmails = util.FlattenSetNestedAttribute(ctx, diags, flattenModelBillingContactEmails, set, attrs)
	}
	if v, ok := m["billing_emails"]; ok {
		set, err := util.CastSlice[map[string]any](v)
		if err != nil {
			diags.AddError("Invalid type", fmt.Sprintf("%q: %s", "billing_emails", err.Error()))
			return diags
		}
		attrs := map[string]attr.Type{"email": types.StringType}
		obj.BillingEmails = util.FlattenSetNestedAttribute(ctx, diags, flattenModelBillingEmails, set, attrs)
	}
	if v, ok := m["billing_address_id"]; ok {
		obj.BillingAddressID = types.StringValue(v.(string))
	}
	if v, ok := m["billing_currency"]; ok {
		obj.BillingCurrency = types.StringValue(v.(string))
	}
	if v, ok := m["billing_group_id"]; ok {
		obj.BillingGroupID = types.StringValue(v.(string))
	}
	if v, ok := m["billing_group_name"]; ok {
		obj.BillingGroupName = types.StringValue(v.(string))
	}
	if v, ok := m["custom_invoice_text"]; ok {
		obj.CustomInvoiceText = types.StringValue(v.(string))
	}
	if v, ok := m["organization_id"]; ok {
		obj.OrganizationID = types.StringValue(v.(string))
	}
	if v, ok := m["payment_method_id"]; ok {
		obj.PaymentMethodID = types.StringValue(v.(string))
	}
	if v, ok := m["shipping_address_id"]; ok {
		obj.ShippingAddressID = types.StringValue(v.(string))
	}
	if v, ok := m["vat_id"]; ok {
		obj.VatID = types.StringValue(v.(string))
	}
	if diags.HasError() {
		return diags
	}
	// DTO might not contain ID fields.
	// In that case, `terraform import` won't be able to set them. Gets values from the ID.
	if obj.ID.ValueString() != "" {
		var parts [2]string
		for i, v := range strings.SplitN(obj.ID.ValueString(), "/", 2) {
			parts[i] = v
		}
		if obj.OrganizationID.ValueString() == "" {
			obj.OrganizationID = types.StringValue(parts[0])
		}
		if obj.BillingGroupID.ValueString() == "" {
			obj.BillingGroupID = types.StringValue(parts[1])
		}
	}
	obj.ID = types.StringValue(fmt.Sprintf("%s/%s", obj.OrganizationID.ValueString(), obj.BillingGroupID.ValueString()))
	return diags
}

func flattenModelBillingContactEmails(ctx context.Context, diags diag.Diagnostics, m map[string]any) modelBillingContactEmails {
	var obj modelBillingContactEmails
	if v, ok := m["email"]; ok {
		obj.Email = types.StringValue(v.(string))
	}
	return obj
}

func flattenModelBillingEmails(ctx context.Context, diags diag.Diagnostics, m map[string]any) modelBillingEmails {
	var obj modelBillingEmails
	if v, ok := m["email"]; ok {
		obj.Email = types.StringValue(v.(string))
	}
	return obj
}
