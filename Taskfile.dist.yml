version: '3'

includes:
  internal:
    taskfile: ./TaskInternal.yml
    internal: true

vars:
  CHANGELOG_FILE: CHANGELOG.md
  CHANGELOG_BACKUP: CHANGELOG.md.bak
  VERSION_PATTERN: '^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$'

tasks:
  default:
    desc: Lists available tasks defined in this file
    silent: true
    cmds:
      - task --list

  #################################################
  # Build Tasks
  #################################################
  build:
    desc: Build the provider binary
    cmds:
      - "{{.GO_CMD}} build"

  build-dev:
    desc: Build the development version for local Terraform testing
    cmds:
      - mkdir -p {{.BUILD_DEV_DIR}}
      - "{{.GO_CMD}} build -gcflags='all=-N -l' -o {{.BUILD_DEV_BIN}}"
    sources:
      - "**/*.go"
    generates:
      - "{{.BUILD_DEV_BIN}}"

  #################################################
  # Test Tasks
  #################################################
  test:
    desc: Run all tests (unit, acceptance, examples)
    deps:
      - test-unit
      - test-acc
      - test-examples

  test-unit:
    desc: Run unit tests
    aliases:
      - unit
    env:
      TF_ACC: 0
      PROVIDER_AIVEN_ENABLE_BETA: 1
    cmds:
      - env -u AIVEN_TOKEN
        {{.TESTSUM}}
        --format pkgname
        --hide-summary=skipped
        --
        -json ./...
        -cover
        -timeout=120s

  test-acc:
    desc: "Run acceptance tests (e.g., task test-acc -- -run TestAccResourceMyThing)"
    env:
      TF_ACC: 1
      PROVIDER_AIVEN_ENABLE_BETA: 1
    vars:
      EFFECTIVE_PKG_PATH: '{{env "PKG_PATH" | default .PKG_PATH}}'
    cmds:
      - cmd: "{{.GO_CMD}} test ./{{.EFFECTIVE_PKG_PATH}}/... -v -count {{.TEST_COUNT}} -parallel {{.ACC_TEST_PARALLELISM}} {{.CLI_ARGS}} -timeout {{.ACC_TEST_TIMEOUT}}"

  test-examples:
    desc: "Run examples tests (e.g., task test-examples -- -run TestAccExampleMyThing)"
    deps:
      - build-dev
      - internal:clean-examples
    env:
      AIVEN_PROVIDER_PATH: "{{.BUILD_DEV_DIR}}"
      PROVIDER_AIVEN_ENABLE_BETA: 1
    cmds:
      - "{{.TESTSUM}}
        --format testname
        --hide-summary=skipped
        --
        --tags=examples
        -json ./examples_tests/...
        -v
        -count {{.TEST_COUNT}}
        -parallel {{.ACC_TEST_PARALLELISM}}
        -timeout {{.ACC_TEST_TIMEOUT}}
        {{.CLI_ARGS}}"

  #################################################
  # Code Style Tasks
  #################################################
  lint:
    desc: Run all linters (Go, Tests, Docs, Semgrep)
    deps:
      - internal:lint-go
      - internal:lint-test
      - internal:lint-docs
      - internal:semgrep

  fmt:
    desc: Run all formatters (Terraform tests, Go imports)
    vars:
      SKIP_PRECOMMIT: '{{default "false" .SKIP_PRECOMMIT}}'
    cmds:
      - defer:
          task: internal:fmt-imports
      - task: internal:fmt-go
      - task: internal:fmt-test
      - task: '{{if ne .SKIP_PRECOMMIT "true"}}internal:fmt-precommit{{else}}internal:nothing{{end}}'

  #################################################
  # Utility Tasks
  #################################################

  generate:
    desc: Generate Go code, documentation, and mocks
    cmds:
      - defer:
          task: fmt
      - task: internal:generate

  update-schemas:
    desc: "Update Go client codegen and API schemas, regenerate mocks, and update CHANGELOG.md"
    cmds:
      - defer:
          task: fmt
      - task: internal:dump-schemas
      - task: internal:load-schemas
      - task: internal:generate
      - task: internal:diff-schemas

  update-client:
    desc: "Update Go client codegen"
    aliases:
      - client
    cmds:
      - task: internal:load-codegen
      - task: internal:dump-mockery

  sweep:
    desc: "Run resource sweepers (WARNING: Destroys infrastructure!)."
    prompt: This will destroy infrastructure. Use only in development accounts. Do you want to continue?
    env:
      TF_SWEEP: 1
    cmds:
      - "{{.GO_CMD}} test ./internal/sweep -v -sweep={{.SWEEP}} {{.CLI_ARGS}} -timeout 15m"

  debug:
    desc: Run the development build in debug mode
    deps:
      - build-dev
    cmds:
      - "{{.BUILD_DEV_BIN}} -debug"

  #################################################
  # OPA Tasks
  #################################################

  opa:test:
    desc: "Run OPA policy tests"
    preconditions:
      - sh: command -v {{.OPA}} >/dev/null 2>&1
        msg: "OPA is not installed. Please run install it manually."
    cmds:
      - "{{.OPA}} test ./opa/policies"


  #################################################
  # CI Tasks
  #################################################

  ci:selproj:
    desc: "Run selproj tool change detection"
    cmds:
      - "{{.SELPROJ}}"
  ci:sweep-check:
    desc: "Run sweeper test checks (TestCheckSweepers) without deleting resources"
    cmds:
      - task: internal:sweep-check
  ci:docs:
    desc: "Generate Terraform provider documentation"
    cmds:
      - task: internal:gen-docs

  ci:discover-test-matrix:
    desc: "Finds Go test directories under, generates a JSON matrix for GitHub Actions"
    cmds:
      - |
        find ./internal -type f -name '*_test.go' -exec dirname {} \; \
        | sort -u \
        | jq -cnR '
            def shortname: split("/")[-2:] | join("-");
            [
              inputs |
              select(length>0) |
              {
                path: .,
                name: (
                  if (. | contains("/plugin/")) then
                    "plugin-" + shortname  # Add plugin- prefix
                  else
                    if (. | contains("/sdkprovider/")) then
                      "sdk-" + shortname
                    else
                      shortname
                    end
                  end
                )
              }
            ]
          '
    silent: true

  ci:changelog-update:
    desc: Update CHANGELOG.md with new version entry
    vars:
      VERSION: '{{.VERSION}}'
      DATE: '{{.DATE | default ""}}'
    preconditions:
      - sh: test -f "{{.CHANGELOG_FILE}}"
        msg: "{{.CHANGELOG_FILE}} not found"
      - sh: test -n "{{.VERSION}}"
        msg: "VERSION is required"
      - sh: echo "{{.VERSION}}" | grep -E "{{.VERSION_PATTERN}}"
        msg: "Version must be in format X.Y.Z or X.Y.Z-suffix"
    cmds:
      # Step 1: Check if version already exists
      - cmd: |
          if grep -q "## \[{{.VERSION}}\]" "{{.CHANGELOG_FILE}}"; then
            echo "Error: Version {{.VERSION}} already exists in {{.CHANGELOG_FILE}}"
            exit 1
          fi
          echo "✓ Version {{.VERSION}} is new"
        silent: false
      # Step 2: Create backup
      - cmd: |
          cp "{{.CHANGELOG_FILE}}" "{{.CHANGELOG_BACKUP}}"
          echo "✓ Created backup at {{.CHANGELOG_BACKUP}}"
        silent: false
      # Step 3: Setup cleanup on exit
      - defer: |
          # Cleanup on exit
          if [ -f "{{.CHANGELOG_BACKUP}}" ]; then
            if [ ! -s "{{.CHANGELOG_FILE}}" ]; then
              echo "Restoring from backup due to error..."
              mv "{{.CHANGELOG_BACKUP}}" "{{.CHANGELOG_FILE}}"
            else
              rm -f "{{.CHANGELOG_BACKUP}}"
            fi
          fi
          rm -f /tmp/changelog_*.tmp
      # Step 4: Determine the date
      - cmd: |
          if [ -n "{{.DATE}}" ]; then
            RELEASE_DATE="{{.DATE}}"
          else
            RELEASE_DATE=$(date +%Y-%m-%d)
          fi
          echo "RELEASE_DATE=${RELEASE_DATE}" > /tmp/changelog_vars.tmp
        silent: false
      # Step 5: Update the changelog
      - cmd: |
          # Source the variables
          source /tmp/changelog_vars.tmp

          cat > /tmp/changelog_update.awk << 'EOF'
          BEGIN {
            printed = 0
            template_found = 0
          }
          /^## \[MAJOR\.MINOR\.PATCH\] - YYYY-MM-DD/ {
            template_found = 1
            print $0
            print ""
            print "## [" version "] - " date
            printed = 1
            next
          }
          { print }
          END {
            if (!template_found) {
              print "Error: Template header '## [MAJOR.MINOR.PATCH] - YYYY-MM-DD' not found" > "/dev/stderr"
              exit 1
            }
          }
          EOF

          # Run the update
          awk -v version="{{.VERSION}}" -v date="${RELEASE_DATE}" \
            -f /tmp/changelog_update.awk "{{.CHANGELOG_BACKUP}}" > "{{.CHANGELOG_FILE}}.tmp"

          if [ $? -eq 0 ]; then
            mv "{{.CHANGELOG_FILE}}.tmp" "{{.CHANGELOG_FILE}}"
            echo "✓ Updated changelog with version {{.VERSION}}"
          else
            echo "Error: Failed to update changelog - template header not found"
            echo "Expected: ## [MAJOR.MINOR.PATCH] - YYYY-MM-DD"
            exit 1
          fi
        silent: false
      # Step 6: Verify the update
      - cmd: |
          if ! grep -q "## \[{{.VERSION}}\] -" "{{.CHANGELOG_FILE}}"; then
            echo "Error: Failed to add version {{.VERSION}} to {{.CHANGELOG_FILE}}"
            mv "{{.CHANGELOG_BACKUP}}" "{{.CHANGELOG_FILE}}"
            exit 1
          fi

          # Check that date was added
          if grep -q "## \[{{.VERSION}}\] - $" "{{.CHANGELOG_FILE}}"; then
            echo "Error: Date was not added properly"
            mv "{{.CHANGELOG_BACKUP}}" "{{.CHANGELOG_FILE}}"
            exit 1
          fi

          echo "✓ Successfully verified version {{.VERSION}} in changelog"
        silent: false
      # Step 7: Show the changes
      - cmd: |
          echo ""
          echo "=== CHANGELOG.md changes ==="
          diff -u "{{.CHANGELOG_BACKUP}}" "{{.CHANGELOG_FILE}}" || true
          echo ""
        silent: false
      # Step 8: Final success message
      - cmd: |
          echo "✅ CHANGELOG.md updated successfully"
          echo "   Version: {{.VERSION}}"
          source /tmp/changelog_vars.tmp
          echo "   Date: ${RELEASE_DATE}"
        silent: false

  ci:changelog-extract:
    desc: Extract changelog content for a specific version
    silent: true
    vars:
      VERSION: '{{.VERSION | default "0.0.0"}}'
    preconditions:
      - sh: test -f "{{.CHANGELOG_FILE}}"
        msg: "{{.CHANGELOG_FILE}} not found"
      - sh: test -n "{{.VERSION}}"
        msg: "VERSION is required"
    cmds:
      - cmd: |
          VERSION="{{.VERSION}}"

          # Check if version exists
          if ! grep -q "## \[{{.VERSION}}\]" "{{.CHANGELOG_FILE}}"; then
            echo "Error: Version {{.VERSION}} not found in {{.CHANGELOG_FILE}}" >&2
            echo "Available versions:" >&2
            grep "^## \[" "{{.CHANGELOG_FILE}}" | head -5 >&2
            exit 1
          fi

          CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
            BEGIN { capture = 0; content = "" }
            /^## \['"$VERSION"'\]/ { capture = 1; next }
            /^## \[/ && capture { exit }
            capture && NF { content = content $0 "\n" }
            END { print content }
          ' "{{.CHANGELOG_FILE}}")

          # If no content found, try without empty line filtering
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
              BEGIN { capture = 0 }
              /^## \['"$VERSION"'\]/ { capture = 1; next }
              /^## \[/ && capture { exit }
              capture { print }
            ' "{{.CHANGELOG_FILE}}" | sed '/^$/d')
          fi

          # Final check
          if [ -z "$CHANGELOG_CONTENT" ]; then
            echo "Warning: No content found for version {{.VERSION}}" >&2
            echo "(Version exists but has no content below it)" >&2
            exit 0
          fi

          echo "$CHANGELOG_CONTENT"
