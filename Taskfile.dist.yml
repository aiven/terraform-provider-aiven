version: '3'

includes:
  internal:
    taskfile: ./TaskInternal.yml
    internal: true

vars:
  CHANGELOG_FILE: CHANGELOG.md
  CHANGELOG_BACKUP: CHANGELOG.md.bak
  VERSION_PATTERN: '^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$'

tasks:
  default:
    desc: Lists available tasks defined in this file
    silent: true
    cmds:
      - task --list

  #################################################
  # Build Tasks
  #################################################
  build:
    desc: Build the provider binary
    cmds:
      - "{{.GO_CMD}} build"

  build-dev:
    desc: Build the development version for local Terraform testing
    cmds:
      - mkdir -p {{.BUILD_DEV_DIR}}
      - "{{.GO_CMD}} build -gcflags='all=-N -l' -o {{.BUILD_DEV_BIN}}"
    sources:
      - "**/*.go"
    generates:
      - "{{.BUILD_DEV_BIN}}"

  #################################################
  # Test Tasks
  #################################################
  test:
    desc: Run all tests (unit, acceptance, examples)
    deps:
      - test-unit
      - test-acc
      - test-examples

  test-unit:
    desc: Run unit tests
    aliases:
      - unit
    env:
      TF_ACC: 0
      PROVIDER_AIVEN_ENABLE_BETA: 1
    cmds:
      - env -u AIVEN_TOKEN
        {{.TESTSUM}}
        --format pkgname
        --hide-summary=skipped
        --
        -json ./...
        -cover
        -timeout=120s

  test-acc:
    desc: "Run acceptance tests (e.g., task test-acc -- -run TestAccResourceMyThing)"
    env:
      TF_ACC: 1
      PROVIDER_AIVEN_ENABLE_BETA: 1
    vars:
      EFFECTIVE_PKG_PATH: '{{env "PKG_PATH" | default .PKG_PATH}}'
    cmds:
      - cmd: "{{.GO_CMD}} test ./{{.EFFECTIVE_PKG_PATH}}/... -v -count {{.TEST_COUNT}} -parallel {{.ACC_TEST_PARALLELISM}} {{.CLI_ARGS}} -timeout {{.ACC_TEST_TIMEOUT}}"

  test-examples:
    desc: "Run examples tests (e.g., task test-examples -- -run TestAccExampleMyThing)"
    deps:
      - build-dev
      - internal:clean-examples
    env:
      AIVEN_PROVIDER_PATH: "{{.BUILD_DEV_DIR}}"
      PROVIDER_AIVEN_ENABLE_BETA: 1
    cmds:
      - "{{.TESTSUM}}
        --format testname
        --hide-summary=skipped
        --
        --tags=examples
        -json ./examples_tests/...
        -v
        -count {{.TEST_COUNT}}
        -parallel {{.ACC_TEST_PARALLELISM}}
        -timeout {{.ACC_TEST_TIMEOUT}}
        {{.CLI_ARGS}}"

  #################################################
  # Code Style Tasks
  #################################################
  lint:
    desc: Run all linters (Go, Tests, Docs, Semgrep)
    deps:
      - internal:lint-go
      - internal:lint-test
      - internal:lint-docs
      - internal:semgrep

  fmt:
    desc: "Run all formatters (Go, Terraform, whitespace). Use FAST_FORMAT=true for quick formatting."
    vars:
      FAST_FORMAT: '{{default "false" .FAST_FORMAT}}'
    cmds:
      - defer:
          task: internal:fmt-imports
      - task: internal:fmt-go
      - task: internal:fmt-test
      - task: '{{if ne .FAST_FORMAT "true"}}internal:fmt-precommit{{else}}internal:fmt-fast{{end}}'

  #################################################
  # Utility Tasks
  #################################################

  generate:
    desc: Generate Go code, documentation, and mocks
    vars:
      no_spec: '{{.no_spec | default "false"}}'
    cmds:
      - defer:
          task: fmt
          vars:
            FAST_FORMAT: true
      - task: internal:generate
        vars:
          no_spec: '{{.no_spec}}'

  docs:
    desc: Generate documentation for the provider
    cmds:
      - defer:
          task: fmt
      - task: internal:gen-docs

  update-schemas:
    desc: "Update Go client codegen and API schemas, regenerate mocks, and update CHANGELOG.md"
    cmds:
      - defer:
          task: fmt
      - task: internal:dump-schemas
      - task: internal:load-schemas
      - task: internal:generate
      - task: internal:diff-schemas

  update-client:
    desc: "Update Go client codegen"
    aliases:
      - client
    cmds:
      - task: internal:load-codegen
      - task: internal:dump-mockery

  sweep:
    desc: "Run resource sweepers (WARNING: Destroys infrastructure!)."
    prompt: This will destroy infrastructure. Use only in development accounts. Do you want to continue?
    env:
      TF_SWEEP: 1
    cmds:
      - "{{.GO_CMD}} test ./internal/sweep -v -sweep={{.SWEEP}} {{.CLI_ARGS}} -timeout 15m"

  debug:
    desc: Run the development build in debug mode
    deps:
      - build-dev
    cmds:
      - "{{.BUILD_DEV_BIN}} -debug"

  #################################################
  # OPA Tasks
  #################################################

  opa:test:
    desc: Run OPA policy tests
    deps:
      - internal:opa:verify
    cmds:
      - "{{.OPA}} test ./opa/policies"

  opa:bundle:
    desc: "Build OPA bundle for distribution"
    deps:
      - internal:opa:verify
      - opa:test
    cmds:
      - mkdir -p dist
      - task: opa:fmt
      - "{{.OPA}} build ./opa/policies/ --bundle --output ./dist/aiven-terraform-policies.tar.gz"

  opa:fmt:
    desc: "Format OPA policy files"
    preconditions:
      - sh: command -v {{.OPA}} >/dev/null 2>&1
        msg: "OPA is not installed. Please run install it manually."
    cmds:
      - "{{.OPA}} fmt --write ./opa/policies"


  #################################################
  # CI Tasks
  #################################################

  ci:selproj:
    desc: "Run selproj tool change detection"
    cmds:
      - "{{.SELPROJ}}"
  ci:sweep-check:
    desc: "Run sweeper test checks (TestCheckSweepers) without deleting resources"
    cmds:
      - task: internal:sweep-check
  ci:docs:
    desc: "Generate Terraform provider documentation (only for CI usage, does not run fmt afterwards)"
    cmds:
      - task: internal:gen-docs

  ci:discover-test-matrix:
    desc: "Finds Go tests, partitions them into normal/slow via SLOW_TESTS_CSV, and generates a JSON matrix for CI. Usage: task ci:discover-test-matrix SLOW_TESTS_CSV=slow_test1,slow_test2"
    vars:
      SLOW_TESTS_CSV: '{{.SLOW_TESTS_CSV | default "sdk-service-vpc"}}'
    cmds:
      - task: internal:discover-test-matrix
        vars:
          SLOW_TESTS_CSV: '{{.SLOW_TESTS_CSV}}'

  ci:changelog-update:
    desc: Update CHANGELOG.md with new version entry
    vars:
      VERSION: '{{.VERSION}}'
      DATE: '{{.DATE | default ""}}'
    preconditions:
      - sh: test -f "{{.CHANGELOG_FILE}}"
        msg: "{{.CHANGELOG_FILE}} not found"
      - sh: test -n "{{.VERSION}}"
        msg: "VERSION is required"
    cmds:
      - "{{.GO_CMD}} run ./tools changelog update {{.VERSION}} --date '{{.DATE}}'"

  ci:changelog-extract:
    desc: Extract changelog content for a specific version
    silent: true
    vars:
      VERSION: '{{.VERSION | default "0.0.0"}}'
    preconditions:
      - sh: test -f "{{.CHANGELOG_FILE}}"
        msg: "{{.CHANGELOG_FILE}} not found"
      - sh: test -n "{{.VERSION}}"
        msg: "VERSION is required"
    cmds:
      - "{{.GO_CMD}} run ./tools/main.go changelog extract {{.VERSION}}"

  ci:verify-version:
    desc: "Verifies the new version doesn't exist and is a sequential bump. Usage: task ci:verify-version VERSION=x.y.z"
    cmds:
      - task: internal:verify-version
        vars:
          VERSION: '{{.VERSION}}'
    requires:
      vars: [VERSION]
