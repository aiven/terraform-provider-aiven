name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 4.10.0)'
        required: true
        type: string
      release_branch_prefix:
        description: 'Release branch prefix (default: automation)'
        required: true
        type: string
        default: 'automation'
      run_acceptance_tests:
        description: 'Run the acceptance tests? (Uncheck to skip for faster testing)'
        required: true
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ inputs.version }}
  cancel-in-progress: true

jobs:
  create_release_pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    outputs:
      pr_head_sha: ${{ steps.create-pr.outputs.pull-request-head-sha }}
      pr_created: ${{ steps.create-pr.outputs.pull-request-number != '' }}

    steps:
      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Version must be in format X.Y.Z (e.g., 3.10.0)"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version already exists
        run: |
          if git tag -l "v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
            echo "Error: Version v${{ inputs.version }} already exists"
            exit 1
          fi

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup release branch
        run: |
          BRANCH_NAME="${{ inputs.release_branch_prefix }}-release-v${{ inputs.version }}"
          echo "RELEASE_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update CHANGELOG.md
        run: |
          task ci:changelog-update VERSION="${{ inputs.version }}"

      - name: Extract changelog content for PR
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(task -s ci:changelog-extract VERSION="${{ inputs.version }}")

          # Store in GitHub env for PR body
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore(release): v${{ inputs.version }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          author: GitHub <noreply@github.com>
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.RELEASE_BRANCH }}
          base: test-release-workflow #TODO: Adjust base branch to main
          title: "chore(release): v${{ inputs.version }}"
          body: |
            ## Release v${{ inputs.version }}

            ### Changelog
            ${{ env.CHANGELOG_CONTENT }}

            ---

            *This PR was created automatically by the release preparation workflow.*
          labels: |
            release
          draft: false

  # Job to run all linting-related checks
  run_lint_checks:
    needs: create_release_pr
    if: needs.create_release_pr.outputs.pr_created
    uses: ./.github/workflows/lint.yml
    with:
      ref: ${{ needs.create_release_pr.outputs.pr_head_sha }}

  # Job to run all unit tests
  run_unit_tests:
    needs: create_release_pr
    if: needs.create_release_pr.outputs.pr_created
    uses: ./.github/workflows/unit-tests.yml
    with:
      ref: ${{ needs.create_release_pr.outputs.pr_head_sha }}

  # Job to run dependency review
  run_dependency_review:
    needs: create_release_pr
    if: needs.create_release_pr.outputs.pr_created
    uses: ./.github/workflows/dependency-review.yml
    with:
      ref: ${{ needs.create_release_pr.outputs.pr_head_sha }}

  run_acceptance_tests:
    needs: create_release_pr
    if: needs.create_release_pr.outputs.pr_created && inputs.run_acceptance_tests
    uses: ./.github/workflows/reusable-acceptance-tests.yml
    with:
      ref: ${{ needs.create_release_pr.outputs.pr_head_sha }}
    secrets: inherit


  report_all_statuses:
    needs:
      - create_release_pr
      - run_lint_checks
      - run_unit_tests
      - run_dependency_review
      - run_acceptance_tests
    runs-on: ubuntu-latest
    if: always() && needs.create_release_pr.outputs.pr_created == 'true'
    permissions:
      statuses: write
    steps:
      - name: Report status of all required checks
        uses: actions/github-script@v7
        with:
          script: |
            const head_sha = '${{ needs.create_release_pr.outputs.pr_head_sha }}';
            if (!head_sha) {
              console.log('Could not find PR head SHA. Skipping status reporting.');
              return;
            }

            // This helper function will post the status
            async function postStatus(context, result, default_description) {
              // Intelligently determine the state and description
              let state = 'failure';
              let description = default_description;

              if (result === 'success') {
                state = 'success';
                description = `${context} passed`;
              } else if (result === 'skipped') {
                state = 'success'; // Treat skipped as success to not block the PR
                description = `${context} was skipped`;
              }
            
              console.log(`Reporting status for context: ${context}, state: ${state}`);
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: head_sha,
                state: state,
                context: context,
                description: description,
                target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
            }

            // Linting Checks
            const lintResult = '${{ needs.run_lint_checks.result }}';
            for (const context of ['commitlint', 'semgrep', 'make_lint', 'check_docs_were_generated']) {
              await postStatus(context, lintResult, 'Linting checks failed');
            }

            // Unit Test Checks
            await postStatus('go_test', '${{ needs.run_unit_tests.result }}', 'Unit tests failed');
            
            // Dependency Review Checks
            await postStatus('dependency-review', '${{ needs.run_dependency_review.result }}', 'Dependency review failed');

            // Acceptance Test Checks
            await postStatus('Acceptance Tests', '${{ needs.run_acceptance_tests.result }}', 'Acceptance tests failed');
