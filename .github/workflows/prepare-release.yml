name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 4.10.0)'
        required: true
        type: string
      release_branch_prefix:
        description: 'Release branch prefix (default: automation)'
        required: true
        type: string
        default: 'automation'

jobs:
  create_release_pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    outputs:
      pr_head_sha: ${{ steps.create-pr.outputs.pull-request-head-sha }}
      pr_created: ${{ steps.create-pr.outputs.pull-request-number != '' }}

    steps:
      - name: Validate version format
        run: |
          if ! echo "${{ inputs.version }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Version must be in format X.Y.Z (e.g., 3.10.0)"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version already exists
        run: |
          if git tag -l "v${{ inputs.version }}" | grep -q "v${{ inputs.version }}"; then
            echo "Error: Version v${{ inputs.version }} already exists"
            exit 1
          fi

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup release branch
        run: |
          BRANCH_NAME="${{ inputs.release_branch_prefix }}-release-v${{ inputs.version }}"
          echo "RELEASE_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update CHANGELOG.md
        run: |
          task ci:changelog-update VERSION="${{ inputs.version }}"

      - name: Extract changelog content for PR
        id: changelog
        run: |
          CHANGELOG_CONTENT=$(task -s ci:changelog-extract VERSION="${{ inputs.version }}")
          
          # Store in GitHub env for PR body
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore(release): v${{ inputs.version }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          author: GitHub <noreply@github.com>
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.RELEASE_BRANCH }}
          base: test-release-workflow #TODO: Adjust base branch to main
          title: "chore(release): v${{ inputs.version }}"
          body: |
            ## Release v${{ inputs.version }}

            ### Changelog
            ${{ env.CHANGELOG_CONTENT }}

            ---

            *This PR was created automatically by the release preparation workflow.*
          labels: |
            release
          draft: false

  run_acceptance_tests:
    needs: create_release_pr
    if: needs.create_release_pr.outputs.pr_created
    uses: ./.github/workflows/reusable-acceptance-tests.yml
    with:
      ref: ${{ needs.create_release_pr.outputs.pr_head_sha }}
    secrets: inherit

  report_test_status:
    needs: [create_release_pr, run_acceptance_tests]
    runs-on: ubuntu-latest
    # 'if: always()' ensures this job runs even if the run_acceptance_tests job fails
    if: always() && needs.create_release_pr.outputs.pr_created == 'true'
    steps:
      - name: Report status based on test outcome
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = '${{ needs.run_acceptance_tests.result }}';
            let state;
            let description;

            if (conclusion === 'success') {
              state = 'success';
              description = 'All acceptance tests passed!';
            } else if (conclusion === 'failure') {
              state = 'failure';
              description = 'One or more acceptance tests failed.';
            } else {
              state = 'error';
              description = 'The test workflow was cancelled or had an error.';
            }

            // Post the status check to the PR's head commit SHA
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ needs.create_release_pr.outputs.pr_head_sha }}',
              state: state,
              context: 'Acceptance Tests',
              description: description,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });