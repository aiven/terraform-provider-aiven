name: Acceptance Tests

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
  push:
    branches:
      - '*-release-v*'
  repository_dispatch:
    types: [release-tests]

permissions:
  contents: read

concurrency:
  group: ci-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  # Check if this is a release-related run
  check_release:
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.check.outputs.is_release }}
    steps:
      - name: Check if release-related
        id: check
        run: |
          # Check if it's a release branch push
          if [[ "${{ github.ref }}" =~ -release-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          # Check if it's a PR with release label
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ contains(github.event.pull_request.labels.*.name, 'release') }}" == "true" ]]; then
              echo "is_release=true" >> $GITHUB_OUTPUT
            else
              echo "is_release=false" >> $GITHUB_OUTPUT
            fi
          # Check if it's a repository dispatch for release tests
          elif [[ "${{ github.event_name }}" == "repository_dispatch" && "${{ github.event.action }}" == "release-tests" ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=true" >> $GITHUB_OUTPUT  # For schedule and manual runs
          fi

  setup_aiven_project_suffix:
    runs-on: ubuntu-latest
    outputs:
      project_name_suffix: ${{ steps.selproj.outputs.project_name_suffix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - id: selproj
        run: echo "project_name_suffix=$(task -s ci:selproj | tr -d '\n')" >> $GITHUB_OUTPUT
        env:
          AIVEN_TOKEN: ${{ secrets.AIVEN_TOKEN }}
          AIVEN_PROJECT_NAME_PREFIX: ${{ secrets.AIVEN_PROJECT_NAME_PREFIX }}

  find_tests:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.find_tests.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - uses: arduino/setup-task@v2
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - id: find_tests
        run: echo "matrix=$(task ci:discover-test-matrix)" >> $GITHUB_OUTPUT

  test:
    name: test (${{ matrix.pkg.name }})
    needs: [setup_aiven_project_suffix, find_tests]
    runs-on: ubuntu-latest
    env:
      ACC_TEST_PARALLELISM: 5
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        pkg: ${{ fromJson(needs.find_tests.outputs.matrix) }}

    steps:
      - uses: softprops/turnstyle@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          same-branch-only: true

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - uses: arduino/setup-task@v2
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3 #Install latest Terraform version
        with:
          terraform_wrapper: false

      # Get the path to the installed Terraform binary
      - id: get_tf_path
        name: Get Terraform Path
        run: echo "terraform_path=$(which terraform)" >> $GITHUB_OUTPUT

      - name: Run Acceptance Tests
        run: task test-acc
        env:
          AIVEN_TOKEN: ${{ secrets.AIVEN_TOKEN }}
          TF_ACC_TERRAFORM_PATH: ${{ steps.get_tf_path.outputs.terraform_path }}
          AIVEN_PROJECT_NAME: >-
            ${{ secrets.AIVEN_PROJECT_NAME_PREFIX }}${{ needs.setup_aiven_project_suffix.outputs.project_name_suffix }}
          AIVEN_ORGANIZATION_NAME: ${{ secrets.AIVEN_ORGANIZATION_NAME }}
          AIVEN_ACCOUNT_NAME: ${{ secrets.AIVEN_ORGANIZATION_NAME }}
          AIVEN_PAYMENT_METHOD_ID: ${{ secrets.AIVEN_PAYMENT_METHOD_ID }}
          PKG_PATH: ${{ matrix.pkg.path }}

  sweep:
    if: always()
    needs: [test, setup_aiven_project_suffix]
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/turnstyle@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          same-branch-only: true

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - uses: arduino/setup-task@v2
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: nick-invision/retry@v3
        if: always()
        with:
          timeout_minutes: 15
          max_attempts: 15
          command: task --yes sweep
        env:
          AIVEN_TOKEN: ${{ secrets.AIVEN_TOKEN }}
          AIVEN_PROJECT_NAME: >-
            ${{ secrets.AIVEN_PROJECT_NAME_PREFIX }}${{ needs.setup_aiven_project_suffix.outputs.project_name_suffix }}
          AIVEN_ORGANIZATION_NAME: ${{ secrets.AIVEN_ORGANIZATION_NAME }}
          AIVEN_ACCOUNT_NAME: ${{ secrets.AIVEN_ORGANIZATION_NAME }}

    # Update PR with test status
  update_pr_status:
    if: always() && github.event_name == 'repository_dispatch'
    needs: [test, check_release]
    runs-on: ubuntu-latest
    steps:
      - name: Update PR with test results
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${{ github.event.client_payload.branch }}`,
              state: 'open'
            });

            if (prs.length > 0) {
              const pr = prs[0];
              const status = '${{ needs.test.result }}' === 'success' ? '✅' : '❌';

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `${status} Acceptance tests for release v${{ github.event.client_payload.version }} have completed with status: **${{ needs.test.result }}**`
              });
            }
