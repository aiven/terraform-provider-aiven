name: Update Schemas

on:
  schedule:
    - cron: 0 5 * * 1-5
  workflow_dispatch: {}

permissions: read-all

jobs:
  create_update_pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    outputs:
      pr_head_sha: ${{ steps.create_pr.outputs.pull-request-head-sha }}
      pr_created: ${{ steps.create_pr.outputs.pull-request-number != '' }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      - uses: arduino/setup-task@v2
        with:
          version: '3.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - run: go install golang.org/x/tools/cmd/goimports@latest
      - run: task update-schemas
      - id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - id: changes
        run: git diff CHANGELOG.md | awk '/^\+[ -]/ {print substr($0, 2)}' > changes.out
      - id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          author: GitHub <noreply@github.com>
          body-path: changes.out
          branch: update-schemas/${{ steps.date.outputs.date }}-${{ github.run_id }}
          commit-message: "chore(update-schemas): ${{ steps.date.outputs.date }}"
          title: "chore(update-schemas): ${{ steps.date.outputs.date }}"
          labels: |
            dependencies
      - name: Close previous update schemas PRs
        if: steps.create_pr.outputs.pull-request-operation == 'created'
        run: |
          new_pr_number=${{ steps.create_pr.outputs.pull-request-number }}
          prs=$(gh pr list --state open --json number,headRefName --jq '.[] | select(.headRefName | startswith("update-schemas/")) | .number')
          for pr in $prs; do
            if [ "$pr" != "$new_pr_number" ]; then
              gh pr close $pr --comment "Auto-closing pull request in favor of #$new_pr_number" --delete-branch
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Run all linting-related checks
  run_lint_checks:
    needs: create_update_pr
    if: needs.create_update_pr.outputs.pr_created
    uses: ./.github/workflows/lint.yml
    with:
      ref: ${{ needs.create_update_pr.outputs.pr_head_sha }}

  # Run unit tests
  run_unit_tests:
    needs: create_update_pr
    if: needs.create_update_pr.outputs.pr_created
    uses: ./.github/workflows/unit-tests.yml
    with:
      ref: ${{ needs.create_update_pr.outputs.pr_head_sha }}

  # Run dependency review
  run_dependency_review:
    needs: create_update_pr
    if: needs.create_update_pr.outputs.pr_created
    uses: ./.github/workflows/dependency-review.yml
    with:
      head_ref: ${{ needs.create_update_pr.outputs.pr_head_sha }}
      base_ref: main

  report_all_statuses:
    needs:
      - create_update_pr
      - run_lint_checks
      - run_unit_tests
      - run_dependency_review
    runs-on: ubuntu-latest
    if: always() && needs.create_update_pr.outputs.pr_created == 'true'
    permissions:
      statuses: write
    steps:
      - name: Report status of all required checks
        uses: actions/github-script@v7
        with:
          script: |
            const head_sha = '${{ needs.create_update_pr.outputs.pr_head_sha }}';
            if (!head_sha) {
              console.log('Could not find PR head SHA. Skipping status reporting.');
              return;
            }

            async function postStatus(checkName, result, default_description) {
              let state = 'failure';
              let description = default_description;

              if (result === 'success') {
                state = 'success';
                description = `${checkName} passed`;
              } else if (result === 'skipped') {
                state = 'success';
                description = `${checkName} was skipped`;
              }

              console.log(`Reporting status for context: ${checkName}, state: ${state}`);
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: head_sha,
                state: state,
                context: checkName,
                description: description,
                target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              });
            }

            const lintResult = '${{ needs.run_lint_checks.result }}';
            for (const check of ['commitlint', 'semgrep', 'make_lint', 'check_docs_were_generated']) {
              await postStatus(check, lintResult, 'Linting checks failed');
            }

            await postStatus('go_test', '${{ needs.run_unit_tests.result }}', 'Unit tests failed');
            await postStatus('dependency-review', '${{ needs.run_dependency_review.result }}', 'Dependency review failed');

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: head_sha,
              state: 'success',
              context: 'changelog-enforcer',
              description: 'Changelog updated by automated schema update process.',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });

  notify-slack-success:
    needs:
      - create_update_pr
      - run_lint_checks
      - run_unit_tests
      - run_dependency_review
    if: success() && needs.create_update_pr.outputs.pr_created == 'true'
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: 'success'
      workflow_name: 'Update Schemas'
      custom_message: 'Schema update PR created and all checks passed'
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}

  notify-slack-failure:
    needs:
      - create_update_pr
      - run_lint_checks
      - run_unit_tests
      - run_dependency_review
    if: failure() && needs.create_update_pr.outputs.pr_created == 'true'
    uses: ./.github/workflows/slack-notify.yml
    with:
      status: 'failure'
      workflow_name: 'Update Schemas'
      custom_message: 'Schema update PR created but checks failed'
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
